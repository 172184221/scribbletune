{"version":3,"sources":["webpack://scribble/webpack/universalModuleDefinition","webpack://scribble/webpack/bootstrap","webpack://scribble/./src/chord.ts","webpack://scribble/./src/utils.ts","webpack://scribble/./src/scale.ts","webpack://scribble/./src/clip.ts","webpack://scribble/./node_modules/tonal-note/build/es6.js","webpack://scribble/./node_modules/tonal-array/build/es6.js","webpack://scribble/./node_modules/tonal-interval/build/es6.js","webpack://scribble/./node_modules/tonal-distance/build/es6.js","webpack://scribble/./node_modules/tonal-pcset/build/es6.js","webpack://scribble/./node_modules/tonal-dictionary/build/es6.js","webpack://scribble/./node_modules/tonal-scale/build/es6.js","webpack://scribble/./node_modules/tonal-chord/build/es6.js","webpack://scribble/./node_modules/tonal/index.js","webpack://scribble/./src/index.ts","webpack://scribble/./src/browserClip.ts","webpack://scribble/./src/progression.ts","webpack://scribble/./src/arp.ts","webpack://scribble/./src/midi.ts","webpack://scribble/external \"fs\"","webpack://scribble/./node_modules/jsmidgen/lib/jsmidgen.js","webpack://scribble/(webpack)/buildin/module.js","webpack://scribble/./src/session.ts","webpack://scribble/./src/channel.ts"],"names":["root","factory","exports","module","require","define","amd","window","__WEBPACK_EXTERNAL_MODULE__12__","installedModules","__webpack_require__","moduleId","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","s","tonal_1","chordNames","Chord","names","utils_1","getChord","isNote","Error","spl","split","tokenizedName","tokenize","chordName","replace","numericalChords","4th","5th","7th","9th","11th","13th","exists","TypeError","chord","map","el","note","transpose","Note","simplify","chords","4","5","7","9","11","13","test","str","expandStr","JSON","stringify","parse","shuffle","arr","lastIndex","length","forEach","idx","rnd","Math","round","random","sizzleMap","maxLevel","pi","PI","piArr","piArrRev","reverse","concat","element","sin","__importStar","this","mod","result","k","Tonal","getScale","tonicOctScale","toLowerCase","scaleName","Scale","notes","scales","__assign","assign","arguments","apply","chord_1","browserClip","hdr","1n","2n","4n","8n","16n","clip","params","pattern","sizzle","arpegiate","subdiv","Array","isArray","synth","instrument","sample","player","samples","sampler","clipNotes","step","recursivelyApplyPatternToNotes","push","level","NAMES","accTypes","slice","filter","acc","indexOf","SHARPS","FLATS","REGEX","exec","toUpperCase","NO_NOTE","freeze","pc","alt","oct","octStr","chroma","midi","freq","SEMI","props","fn","cache","memo","tokens","letter","charCodeAt","midiToFreq","es6_name","tuning","pow","L2","log","L440","freqToMidi","v","es6_chroma","stepToLetter","fillStr","join","altToAcc","num","op","numToStr","es6_from","fromProps","baseNote","_a","build","fromMidi","sharps","floor","sameAcc","useSharps","enharmonic","range","a","b","ascR","descR","rotate","times","len","compact","height","sort","src","unique","permutations","reduce","perm","e","pos","newPerm","splice","es6_REGEX","RegExp","SIZES","CLASSES","es6_NAMES","es6_names","types","es6_tokenize","NO_IVL","q","dir","type","simple","semitones","es6_fillStr","abs","qToAlt","altToQ","numToStep","es6_properties","ic","es6_props","build_es6_name","build_es6_chroma","ivl","es6_build","_b","_c","undefined","es6_simplify","intervalProps","invert","IN","IQ","fromSemitones","FIFTHS","FIFTH_OCTS","f","STEPS","decode","unaltered","encoder","es6_memo","ref","encode","encodeNote","encodeIvl","interval","tr","trFifths","fifths","es6_fifths","from","to","transposeBy","decodeIvl","addIntervals","ivl1","ivl2","i1","i2","es6_add","subtract","es6_interval","es6_semitones","es6_chr","pcsetNum","set","parseInt","tonal_pcset_build_es6_chroma","clen","isChroma","es6_all","chromas","toString","modes","normalize","binary","_","build_es6_REGEX","IVLS","es6_intervals","isEqual","s1","s2","isSubsetOf","isSupersetOf","includes","dictionary","raw","keys","data","index","add","ivls","alias","chr","allKeys","dict","combine","es6_scale","es6_pcset","NO_SCALE","intervals","setnum","build_es6_props","memoize","build_es6_names","build_es6_intervals","build_es6_tokenize","es6_notes","nameOrTonic","tonic","substring","modeNames","tonics","x","es6_chords","inScale","toScale","pcset","scale","supersets","isSuperset","subsets","isSubset","tonal_chord_build_es6_names","NO_CHORD","tonal_chord_build_es6_props","build_es6_memo","tonal_chord_build_es6_intervals","tonal_chord_build_es6_tokenize","build_es6_notes","es6_exists","es6_supersets","es6_subsets","NUM_TYPES","__webpack_exports__","tonal_transpose","tonal_interval","tonal_note","tonal_midi","tonal_freq","tonal_chord","tonal_scale","build_es6_namespaceObject","es6_namespaceObject","tonal_interval_build_es6_namespaceObject","tonal_distance_build_es6_namespaceObject","tonal_scale_build_es6_namespaceObject","tonal_chord_build_es6_namespaceObject","tonal_pcset_build_es6_namespaceObject","tonal_dictionary_build_es6_namespaceObject","scale_1","clip_1","progression_1","getChordDegrees","getChordsByProgression","arp_1","arp","midi_1","session_1","Session","effects","eff","Tone","Gain","gain","volume","Player","Sampler","chain","Master","Sequence","time","start","counter","triggerAttackRelease","dur","getSamplerSeqFn","voices","getInstrSeqFn","getMonoInstrSeqFn","theRomans","ionian","dorian","phrygian","lydian","mixolydian","aeolian","locrian","melodic minor","harmonic minor","major","minor","idxByDegree","ii","iii","iv","vi","vii","noteOctaveScale","chordDegress","noteOctaveScaleArr","match","roman","prefix","getChordName","scaleId","chordsOrParams","finalArr","count","order","_loop_1","bumpOctave","arr1","arr2","filledArr","reorderedArr","_i","chordsArr_1","__importDefault","default","fs_1","jsmidgen","fileName","bytes","file","File","track","Track","addTrack","notes_1","noteObj","noteOn","noteOff","addChord","createFileFromNotes","toBytes","endsWith","writeFileSync","console","Midi","exported","DEFAULT_VOLUME","Util","DEFAULT_DURATION","DEFAULT_CHANNEL","midi_letter_pitches","g","midiPitchFromNote","matches","accidental","substr","ensureMidiPitch","midi_pitches_letter","12","14","15","16","17","18","19","20","21","22","23","midi_flattened_notes","a#","c#","d#","f#","g#","noteFromMidiPitch","returnFlattened","noteName","octave","noteNum","mpqnFromBpm","bpm","mpqn","ret","unshift","bpmFromMpqn","codes2Str","byteArray","String","fromCharCode","str2Bytes","finalBytes","chars","translateTickTime","ticks","buffer","bList","MidiEvent","channel","param1","setTime","setType","setChannel","setParam1","setParam2","param2","NOTE_OFF","NOTE_ON","AFTER_TOUCH","CONTROLLER","PROGRAM_CHANGE","CHANNEL_AFTERTOUCH","PITCH_BEND","typeChannelByte","MetaEvent","setData","SEQUENCE","TEXT","COPYRIGHT","TRACK_NAME","INSTRUMENT","LYRIC","MARKER","CUE_POINT","CHANNEL_PREFIX","END_OF_TRACK","TEMPO","SMPTE","TIME_SIG","KEY_SIG","SEQ_EVENT","dataBytes","config","events","START_BYTES","END_BYTES","addEvent","event","addNoteOn","pitch","velocity","addNoteOff","addNote","setInstrument","setTempo","tempo","trackLength","eventBytes","startBytes","endBytes","lengthBytes","tracks","HDR_CHUNKID","HDR_CHUNK_SIZE","HDR_TYPE0","HDR_TYPE1","trackCount","Event","webpackPolyfill","deprecate","paths","children","channel_1","sessionChannels","ch","Channel","createChannel","configurable","startRow","startClip","__rest","getOwnPropertySymbols","getNextPos","Transport","position","_this","activePatternIdx","channelClips","toMaster","clips","originalParamsFiltered","addClip","stopClip","state","stop","clipParams"],"mappings":"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","file":"scribbletune.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory(require(\"fs\"));\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([\"fs\"], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"scribble\"] = factory(require(\"fs\"));\n\telse\n\t\troot[\"scribble\"] = factory(root[\"fs\"]);\n})(window, function(__WEBPACK_EXTERNAL_MODULE__12__) {\nreturn "," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 7);\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar tonal_1 = require(\"tonal\");\nvar chordNames = tonal_1.Chord.names();\nvar utils_1 = require(\"./utils\");\n/**\n * Derive a chord from the given string. Exposed as simply `chord` in Scribbletune\n * @return {Array}     [example output: ['c4', 'e4', 'g4']]\n */\nexports.getChord = function (name) {\n    if (utils_1.isNote(name)) {\n        throw new Error(name + \" is not a chord!\");\n    }\n    // Separate the octave from the chord\n    var spl = name.split('-'); // e.g. CMaj7-4 => ['CMaj7', '4'];\n    // tonal doesnt recognize 5 and below in the `tokenize` method,\n    // hence explicitly massage those out\n    var tokenizedName = tonal_1.Chord.tokenize(spl[0]); // e.g. ['C', 'Maj7']\n    var root = tokenizedName[0];\n    var chordName = tokenizedName[1];\n    if (root[1] === '4' || root[1] === '5') {\n        chordName = root[1];\n        root = root.replace(/\\d/, '');\n    }\n    // Since chords like C5 can also qualify for the note C5,\n    // Scribbletune treats such chords with the `th` appended to it\n    var numericalChords = {\n        '4th': '4',\n        '5th': '5',\n        '7th': '7',\n        '9th': '9',\n        '11th': '11',\n        '13th': '13',\n    };\n    if (numericalChords[chordName]) {\n        chordName = numericalChords[chordName];\n    }\n    if (!tonal_1.Chord.exists(chordName)) {\n        throw new TypeError('Invalid chord name: ' + chordName);\n    }\n    return (tonal_1.chord(chordName) || []).map(function (el) {\n        var note = tonal_1.transpose.bind(null, root + (spl[1] || 4))(el);\n        return tonal_1.Note.simplify(note);\n    });\n};\n/**\n * Get a list of chords available in Scribbletune.\n * @return {Array}     [example output: ['maj', 'min', 'dim']]\n */\nexports.chords = function () {\n    // Since chords like C5 can also qualify for the note C5,\n    // Scribbletune treats such chords with the `th` appended to it\n    var numericalChords = {\n        '4': '4th',\n        '5': '5th',\n        '7': '7th',\n        '9': '9th',\n        '11': '11th',\n        '13': '13th',\n    };\n    return chordNames.map(function (c) {\n        if (/^\\d+$/.test(c) && numericalChords[c]) {\n            return numericalChords[c];\n        }\n        else {\n            return c;\n        }\n    });\n};\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\n/**\n * Take a string input and check if it s a note name or not\n * @param  {String} str Note name e.g. c4\n * @return {Boolean} Return true for c4 or return false for something like CM\n */\nexports.isNote = function (str) {\n    return /^[a-gA-G](?:#|b)?\\d$/.test(str);\n};\n/**\n * Take a String input such as xxx[xx[xx]]\n * and return an Array as ['x', 'x', 'x', ['x', 'x', ['x', 'x']]]\n * @param  {String} str\n * @return {Array}\n */\nexports.expandStr = function (str) {\n    str = JSON.stringify(str.split(''));\n    str = str.replace(/,\"\\[\",/g, ', [');\n    str = str.replace(/\"\\[\",/g, '[');\n    str = str.replace(/,\"\\]\"/g, ']');\n    return JSON.parse(str);\n};\n/**\n * Basic Array randomizer\n * @param  {Array} arr\n * @return {Array}\n */\nexports.shuffle = function (arr) {\n    var lastIndex = arr.length - 1;\n    arr.forEach(function (el, idx) {\n        var rnd = Math.round(Math.random() * lastIndex);\n        arr[idx] = arr[rnd];\n        arr[rnd] = el;\n    });\n    return arr;\n};\n/**\n * Return an array of numbers relative to maxLevel || 127 ordered in a Sine wave format\n * This is used by the `sizzle` param of the `clip` method to add a rudimentary variation to the accent of each note\n * @param {Number} maxLevel A number between not more than 127\n * @return {Array}  Example output [63, 90, 110, 127, 110, 90, 63, 0, 63, 90, 110, 127, 110, 90, 63, 0]\n */\nexports.sizzleMap = function (maxLevel) {\n    if (maxLevel === void 0) { maxLevel = 127; }\n    var pi = Math.PI;\n    var piArr = [\n        pi / 6,\n        pi / 4,\n        pi / 3,\n        pi / 2,\n        (2 * pi) / 3,\n        (3 * pi) / 4,\n        (5 * pi) / 6,\n        pi,\n    ];\n    var piArrRev = [\n        0,\n        pi / 6,\n        pi / 4,\n        pi / 3,\n        pi / 2,\n        (2 * pi) / 3,\n        (3 * pi) / 4,\n        (5 * pi) / 6,\n    ];\n    piArrRev.reverse();\n    var arr = piArr.concat(piArrRev);\n    return arr.map(function (element) { return Math.round(Math.sin(element) * maxLevel); });\n};\n","\"use strict\";\nvar __importStar = (this && this.__importStar) || function (mod) {\n    if (mod && mod.__esModule) return mod;\n    var result = {};\n    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];\n    result[\"default\"] = mod;\n    return result;\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar Tonal = __importStar(require(\"tonal\"));\nexports.getScale = function (tonicOctScale) {\n    tonicOctScale = tonicOctScale && tonicOctScale.toLowerCase();\n    // In Tonal, the only scales that are not entirely lower case are\n    // lydian #5P pentatonic and minor #7M pentatonic,\n    // hence make provision for them separately\n    tonicOctScale = tonicOctScale.replace('#5p', '#5P');\n    tonicOctScale = tonicOctScale.replace('#7m', '#7M');\n    var tokenizedName = Tonal.Scale.tokenize(tonicOctScale);\n    var scaleName = tokenizedName[1];\n    if (!Tonal.Scale.exists(scaleName)) {\n        throw new Error(tonicOctScale + \" does not exist!\");\n    }\n    return Tonal.Scale.notes(tonicOctScale).map(Tonal.Note.simplify);\n};\nexports.scales = function () {\n    return Tonal.Scale.names();\n};\n","\"use strict\";\nvar __assign = (this && this.__assign) || function () {\n    __assign = Object.assign || function(t) {\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\n            s = arguments[i];\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))\n                t[p] = s[p];\n        }\n        return t;\n    };\n    return __assign.apply(this, arguments);\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar utils_1 = require(\"./utils\");\nvar chord_1 = require(\"./chord\");\n/* tslint:disable:no-var-requires */\nvar browserClip = typeof window !== 'undefined' && require('./browserClip');\n/**\n * Get defauly params for a clip, such as root note, pattern etc\n * @return {Object}\n */\nvar getDefaultParams = function () { return ({\n    notes: ['C4'],\n    pattern: 'x',\n    shuffle: false,\n    sizzle: false,\n    arpegiate: false,\n    subdiv: '4n',\n}); };\n/**\n * HDR speed is denoted by the number of ticks per note\n * By default this is set to a quarter note (4n) to be in line with Tone.js' default subdivision\n * Technically a bar is 512 ticks long. So it's HDR speed is 512\n * @type {Object}\n */\nvar hdr = {\n    '1n': 512,\n    '2n': 256,\n    '4n': 128,\n    '8n': 64,\n    '16n': 32,\n};\nexports.clip = function (params) {\n    params = __assign({}, getDefaultParams(), (params || {}));\n    // If notes is a string, split it into an array\n    if (typeof params.notes === 'string') {\n        // Remove any accidental double spaces\n        params.notes = params.notes.replace(/\\s{2,}/g, ' ');\n        params.notes = params.notes.split(' ');\n    }\n    // Convert chords if any to notes\n    params.notes = params.notes.map(function (el) {\n        if (utils_1.isNote(el)) {\n            // A note needs to be an array so that it can accomodate chords or single notes with a single interface\n            return [el];\n        }\n        if (chord_1.getChord(el)) {\n            // A note such as c6 could be a chord (sixth) or a note (c on the 6th octave)\n            // This also applies to c4, c5, c6, c9, c11\n            // TODO: Identify a way to avoid returning unwanted results\n            el = chord_1.getChord(el);\n        }\n        if (Array.isArray(el)) {\n            // This could be a chord provided as an array\n            // make sure it uses valid notes\n            el.forEach(function (n) {\n                if (!utils_1.isNote(n)) {\n                    throw new TypeError('array must comprise valid notes');\n                }\n            });\n        }\n        return el;\n    });\n    if (/[^x\\-_\\[\\]]/.test(params.pattern)) {\n        throw new TypeError(\"pattern can only comprise x - _ [ ], found \" + params.pattern);\n    }\n    if (params.shuffle) {\n        params.notes = utils_1.shuffle(params.notes);\n    }\n    // If the clip method is being called in the context of a Tone.js instrument or synth,\n    // then there's no need to continue\n    if (params.synth ||\n        params.instrument ||\n        params.sample ||\n        params.player ||\n        params.samples ||\n        params.sampler) {\n        return browserClip(params);\n    }\n    var clipNotes = [];\n    var step = 0;\n    /**\n     * Recursively apply pattern to notes\n     *\n     * Pass in a pattern array such as ['x', '-', 'x', 'x'] with a length for each element\n     * The length is the HDR speed or tick length (obtained from the hdr object in this script)\n     * If the element of this array is also a (pattern) array, then divide the length by\n     * the length of the inner array and then call the recursive function on that inner array\n     */\n    var recursivelyApplyPatternToNotes = function (arr, length) {\n        arr.forEach(function (el) {\n            if (typeof el === 'string') {\n                var note = null;\n                // If the note is to be `on`, then it needs to be an array\n                if (el === 'x') {\n                    note = params.notes[step];\n                    step++;\n                }\n                // Push only note on OR off messages to the clip notes array\n                if (el === 'x' || el === '-') {\n                    clipNotes.push({ note: note, length: length, level: 127 });\n                }\n                // In case of an underscore, simply extend the previous note's length\n                if (el === '_' && clipNotes.length) {\n                    clipNotes[clipNotes.length - 1].length += length;\n                }\n                // If the pattern is longer than the notes, then repeat notes\n                if (step === params.notes.length) {\n                    step = 0;\n                }\n            }\n            if (Array.isArray(el)) {\n                recursivelyApplyPatternToNotes(el, length / el.length);\n            }\n        });\n    };\n    recursivelyApplyPatternToNotes(utils_1.expandStr(params.pattern), hdr[params.subdiv] || hdr['4n']);\n    return clipNotes;\n};\n","var NAMES = \"C C# Db D D# Eb E F F# Gb G G# Ab A A# Bb B\".split(\" \");\r\nvar names = function (accTypes) {\r\n    return typeof accTypes !== \"string\"\r\n        ? NAMES.slice()\r\n        : NAMES.filter(function (n) {\r\n            var acc = n[1] || \" \";\r\n            return accTypes.indexOf(acc) !== -1;\r\n        });\r\n};\r\nvar SHARPS = names(\" #\");\r\nvar FLATS = names(\" b\");\r\nvar REGEX = /^([a-gA-G]?)(#{1,}|b{1,}|x{1,}|)(-?\\d*)\\s*(.*)$/;\r\nfunction tokenize(str) {\r\n    if (typeof str !== \"string\")\r\n        str = \"\";\r\n    var m = REGEX.exec(str);\r\n    return [m[1].toUpperCase(), m[2].replace(/x/g, \"##\"), m[3], m[4]];\r\n}\r\nvar NO_NOTE = Object.freeze({\r\n    pc: null,\r\n    name: null,\r\n    step: null,\r\n    alt: null,\r\n    oct: null,\r\n    octStr: null,\r\n    chroma: null,\r\n    midi: null,\r\n    freq: null\r\n});\r\nvar SEMI = [0, 2, 4, 5, 7, 9, 11];\r\nvar properties = function (str) {\r\n    var tokens = tokenize(str);\r\n    if (tokens[0] === \"\" || tokens[3] !== \"\")\r\n        return NO_NOTE;\r\n    var letter = tokens[0], acc = tokens[1], octStr = tokens[2];\r\n    var p = {\r\n        letter: letter,\r\n        acc: acc,\r\n        octStr: octStr,\r\n        pc: letter + acc,\r\n        name: letter + acc + octStr,\r\n        step: (letter.charCodeAt(0) + 3) % 7,\r\n        alt: acc[0] === \"b\" ? -acc.length : acc.length,\r\n        oct: octStr.length ? +octStr : null,\r\n        chroma: 0,\r\n        midi: null,\r\n        freq: null\r\n    };\r\n    p.chroma = (SEMI[p.step] + p.alt + 120) % 12;\r\n    p.midi = p.oct !== null ? SEMI[p.step] + p.alt + 12 * (p.oct + 1) : null;\r\n    p.freq = midiToFreq(p.midi);\r\n    return Object.freeze(p);\r\n};\r\nvar memo = function (fn, cache) {\r\n    if (cache === void 0) { cache = {}; }\r\n    return function (str) { return cache[str] || (cache[str] = fn(str)); };\r\n};\r\nvar props = memo(properties);\r\nvar name = function (str) { return props(str).name; };\r\nvar pc = function (str) { return props(str).pc; };\r\nvar isMidiRange = function (m) { return m >= 0 && m <= 127; };\r\nvar midi = function (note) {\r\n    if (typeof note !== \"number\" && typeof note !== \"string\") {\r\n        return null;\r\n    }\r\n    var midi = props(note).midi;\r\n    var value = midi || midi === 0 ? midi : +note;\r\n    return isMidiRange(value) ? value : null;\r\n};\r\nvar midiToFreq = function (midi, tuning) {\r\n    if (tuning === void 0) { tuning = 440; }\r\n    return typeof midi === \"number\" ? Math.pow(2, (midi - 69) / 12) * tuning : null;\r\n};\r\nvar freq = function (note) { return props(note).freq || midiToFreq(note); };\r\nvar L2 = Math.log(2);\r\nvar L440 = Math.log(440);\r\nvar freqToMidi = function (freq) {\r\n    var v = (12 * (Math.log(freq) - L440)) / L2 + 69;\r\n    return Math.round(v * 100) / 100;\r\n};\r\nvar chroma = function (str) { return props(str).chroma; };\r\nvar oct = function (str) { return props(str).oct; };\r\nvar LETTERS = \"CDEFGAB\";\r\nvar stepToLetter = function (step) { return LETTERS[step]; };\r\nvar fillStr = function (s, n) { return Array(n + 1).join(s); };\r\nvar numToStr = function (num, op) {\r\n    return typeof num !== \"number\" ? \"\" : op(num);\r\n};\r\nvar altToAcc = function (alt) {\r\n    return numToStr(alt, function (alt) { return (alt < 0 ? fillStr(\"b\", -alt) : fillStr(\"#\", alt)); });\r\n};\r\nvar from = function (fromProps, baseNote) {\r\n    if (fromProps === void 0) { fromProps = {}; }\r\n    if (baseNote === void 0) { baseNote = null; }\r\n    var _a = baseNote\r\n        ? Object.assign({}, props(baseNote), fromProps)\r\n        : fromProps, step = _a.step, alt = _a.alt, oct = _a.oct;\r\n    if (typeof step !== \"number\")\r\n        return null;\r\n    var letter = stepToLetter(step);\r\n    if (!letter)\r\n        return null;\r\n    var pc = letter + altToAcc(alt);\r\n    return oct || oct === 0 ? pc + oct : pc;\r\n};\r\nvar build = from;\r\nfunction fromMidi(num, sharps) {\r\n    if (sharps === void 0) { sharps = false; }\r\n    num = Math.round(num);\r\n    var pcs = sharps === true ? SHARPS : FLATS;\r\n    var pc = pcs[num % 12];\r\n    var o = Math.floor(num / 12) - 1;\r\n    return pc + o;\r\n}\r\nvar simplify = function (note, sameAcc) {\r\n    if (sameAcc === void 0) { sameAcc = true; }\r\n    var _a = props(note), alt = _a.alt, chroma = _a.chroma, midi = _a.midi;\r\n    if (chroma === null)\r\n        return null;\r\n    var alteration = alt;\r\n    var useSharps = sameAcc === false ? alteration < 0 : alteration > 0;\r\n    return midi === null\r\n        ? pc(fromMidi(chroma, useSharps))\r\n        : fromMidi(midi, useSharps);\r\n};\r\nvar enharmonic = function (note) { return simplify(note, false); };\n\nexport { names, tokenize, props, name, pc, midi, midiToFreq, freq, freqToMidi, chroma, oct, stepToLetter, altToAcc, from, build, fromMidi, simplify, enharmonic };\n","/**\n * [![npm version](https://img.shields.io/npm/v/tonal-array.svg?style=flat-square)](https://www.npmjs.com/package/tonal-array)\n *\n * Tonal array utilities. Create ranges, sort notes, ...\n *\n * @example\n * import * as Array;\n * Array.sort([\"f\", \"a\", \"c\"]) // => [\"C\", \"F\", \"A\"]\n *\n * @example\n * const Array = require(\"tonal-array\")\n * Array.range(1, 4) // => [1, 2, 3, 4]\n *\n * @module Array\n */\nimport { props, name } from \"tonal-note\";\n\n// ascending range\nfunction ascR(b, n) {\n  for (var a = []; n--; a[n] = n + b){ ; }\n  return a;\n}\n// descending range\nfunction descR(b, n) {\n  for (var a = []; n--; a[n] = b - n){ ; }\n  return a;\n}\n\n/**\n * Create a numeric range\n *\n * @param {Number} from\n * @param {Number} to\n * @return {Array}\n *\n * @example\n * Array.range(-2, 2) // => [-2, -1, 0, 1, 2]\n * Array.range(2, -2) // => [2, 1, 0, -1, -2]\n */\nexport function range(a, b) {\n  return a === null || b === null\n    ? []\n    : a < b\n      ? ascR(a, b - a + 1)\n      : descR(a, a - b + 1);\n}\n/**\n *\n * Rotates a list a number of times. It\"s completly agnostic about the\n * contents of the list.\n *\n * @param {Integer} times - the number of rotations\n * @param {Array} array\n * @return {Array} the rotated array\n * @example\n * Array.rotate(1, [1, 2, 3]) // => [2, 3, 1]\n */\nexport function rotate(times, arr) {\n  var len = arr.length;\n  var n = ((times % len) + len) % len;\n  return arr.slice(n, len).concat(arr.slice(0, n));\n}\n\n/**\n * Return a copy of the array with the null values removed\n * @function\n * @param {Array} array\n * @return {Array}\n *\n * @example\n * Array.compact([\"a\", \"b\", null, \"c\"]) // => [\"a\", \"b\", \"c\"]\n */\nexport var compact = function (arr) { return arr.filter(function (n) { return n === 0 || n; }); };\n\n// a function that get note heights (with negative number for pitch classes)\nvar height = function (name) {\n  var m = props(name).midi;\n  return m !== null ? m : props(name + \"-100\").midi;\n};\n\n/**\n * Sort an array of notes in ascending order\n *\n * @param {String|Array} notes\n * @return {Array} sorted array of notes\n */\nexport function sort(src) {\n  return compact(src.map(name)).sort(function (a, b) { return height(a) > height(b); });\n}\n\n/**\n * Get sorted notes with duplicates removed\n *\n * @function\n * @param {Array} notes\n */\nexport function unique(arr) {\n  return sort(arr).filter(function (n, i, a) { return i === 0 || n !== a[i - 1]; });\n}\n\n/**\n * Randomizes the order of the specified array in-place, using the Fisher–Yates shuffle.\n *\n * @private\n * @function\n * @param {Array|String} arr - the array\n * @return {Array} the shuffled array\n *\n * @example\n * Array.shuffle([\"C\", \"D\", \"E\", \"F\"])\n */\nexport var shuffle = function (arr, rnd) {\n  if ( rnd === void 0 ) rnd = Math.random;\n\n  var i, t;\n  var m = arr.length;\n  while (m) {\n    i = (rnd() * m--) | 0;\n    t = arr[m];\n    arr[m] = arr[i];\n    arr[i] = t;\n  }\n  return arr;\n};\n\n/**\n * Get all permutations of an array\n * http://stackoverflow.com/questions/9960908/permutations-in-javascript\n *\n * @param {Array} array - the array\n * @return {Array<Array>} an array with all the permutations\n */\nexport var permutations = function (arr) {\n  if (arr.length === 0) { return [[]]; }\n  return permutations(arr.slice(1)).reduce(function(acc, perm) {\n    return acc.concat(\n      arr.map(function(e, pos) {\n        var newPerm = perm.slice();\n        newPerm.splice(pos, 0, arr[0]);\n        return newPerm;\n      })\n    );\n  }, []);\n};\n","var IVL_TNL = \"([-+]?\\\\d+)(d{1,4}|m|M|P|A{1,4})\";\r\nvar IVL_STR = \"(AA|A|P|M|m|d|dd)([-+]?\\\\d+)\";\r\nvar REGEX = new RegExp(\"^\" + IVL_TNL + \"|\" + IVL_STR + \"$\");\r\nvar SIZES = [0, 2, 4, 5, 7, 9, 11];\r\nvar TYPES = \"PMMPPMM\";\r\nvar CLASSES = [0, 1, 2, 3, 4, 5, 6, 5, 4, 3, 2, 1];\r\nvar NAMES = \"1P 2m 2M 3m 3M 4P 5P 6m 6M 7m 7M 8P\".split(\" \");\r\nvar names = function (types) {\r\n    return typeof types !== \"string\"\r\n        ? NAMES.slice()\r\n        : NAMES.filter(function (n) { return types.indexOf(n[1]) !== -1; });\r\n};\r\nvar tokenize = function (str) {\r\n    var m = REGEX.exec(\"\" + str);\r\n    if (m === null)\r\n        return null;\r\n    return (m[1] ? [m[1], m[2]] : [m[4], m[3]]);\r\n};\r\nvar NO_IVL = Object.freeze({\r\n    name: null,\r\n    num: null,\r\n    q: null,\r\n    step: null,\r\n    alt: null,\r\n    dir: null,\r\n    type: null,\r\n    simple: null,\r\n    semitones: null,\r\n    chroma: null,\r\n    oct: null\r\n});\r\nvar fillStr = function (s, n) { return Array(Math.abs(n) + 1).join(s); };\r\nvar qToAlt = function (type, q) {\r\n    if (q === \"M\" && type === \"M\")\r\n        return 0;\r\n    if (q === \"P\" && type === \"P\")\r\n        return 0;\r\n    if (q === \"m\" && type === \"M\")\r\n        return -1;\r\n    if (/^A+$/.test(q))\r\n        return q.length;\r\n    if (/^d+$/.test(q))\r\n        return type === \"P\" ? -q.length : -q.length - 1;\r\n    return null;\r\n};\r\nvar altToQ = function (type, alt) {\r\n    if (alt === 0)\r\n        return type === \"M\" ? \"M\" : \"P\";\r\n    else if (alt === -1 && type === \"M\")\r\n        return \"m\";\r\n    else if (alt > 0)\r\n        return fillStr(\"A\", alt);\r\n    else if (alt < 0)\r\n        return fillStr(\"d\", type === \"P\" ? alt : alt + 1);\r\n    else\r\n        return null;\r\n};\r\nvar numToStep = function (num) { return (Math.abs(num) - 1) % 7; };\r\nvar properties = function (str) {\r\n    var t = tokenize(str);\r\n    if (t === null)\r\n        return NO_IVL;\r\n    var p = {\r\n        num: 0,\r\n        q: \"d\",\r\n        name: \"\",\r\n        type: \"M\",\r\n        step: 0,\r\n        dir: -1,\r\n        simple: 1,\r\n        alt: 0,\r\n        oct: 0,\r\n        semitones: 0,\r\n        chroma: 0,\r\n        ic: 0\r\n    };\r\n    p.num = +t[0];\r\n    p.q = t[1];\r\n    p.step = numToStep(p.num);\r\n    p.type = TYPES[p.step];\r\n    if (p.type === \"M\" && p.q === \"P\")\r\n        return NO_IVL;\r\n    p.name = \"\" + p.num + p.q;\r\n    p.dir = p.num < 0 ? -1 : 1;\r\n    p.simple = (p.num === 8 || p.num === -8\r\n        ? p.num\r\n        : p.dir * (p.step + 1));\r\n    p.alt = qToAlt(p.type, p.q);\r\n    p.oct = Math.floor((Math.abs(p.num) - 1) / 7);\r\n    p.semitones = p.dir * (SIZES[p.step] + p.alt + 12 * p.oct);\r\n    p.chroma = ((((p.dir * (SIZES[p.step] + p.alt)) % 12) + 12) %\r\n        12);\r\n    return Object.freeze(p);\r\n};\r\nvar cache = {};\r\nfunction props(str) {\r\n    if (typeof str !== \"string\")\r\n        return NO_IVL;\r\n    return cache[str] || (cache[str] = properties(str));\r\n}\r\nvar num = function (str) { return props(str).num; };\r\nvar name = function (str) { return props(str).name; };\r\nvar semitones = function (str) { return props(str).semitones; };\r\nvar chroma = function (str) { return props(str).chroma; };\r\nvar ic = function (ivl) {\r\n    if (typeof ivl === \"string\")\r\n        ivl = props(ivl).chroma;\r\n    return typeof ivl === \"number\" ? CLASSES[ivl % 12] : null;\r\n};\r\nvar build = function (_a) {\r\n    var _b = _a === void 0 ? {} : _a, num = _b.num, step = _b.step, alt = _b.alt, _c = _b.oct, oct = _c === void 0 ? 1 : _c, dir = _b.dir;\r\n    if (step !== undefined)\r\n        num = step + 1 + 7 * oct;\r\n    if (num === undefined)\r\n        return null;\r\n    if (typeof alt !== \"number\")\r\n        return null;\r\n    var d = typeof dir !== \"number\" ? \"\" : dir < 0 ? \"-\" : \"\";\r\n    var type = TYPES[numToStep(num)];\r\n    return (d + num + altToQ(type, alt));\r\n};\r\nvar simplify = function (str) {\r\n    var p = props(str);\r\n    if (p === NO_IVL)\r\n        return null;\r\n    var intervalProps = p;\r\n    return intervalProps.simple + intervalProps.q;\r\n};\r\nvar invert = function (str) {\r\n    var p = props(str);\r\n    if (p === NO_IVL)\r\n        return null;\r\n    var intervalProps = p;\r\n    var step = (7 - intervalProps.step) % 7;\r\n    var alt = intervalProps.type === \"P\" ? -intervalProps.alt : -(intervalProps.alt + 1);\r\n    return build({ step: step, alt: alt, oct: intervalProps.oct, dir: intervalProps.dir });\r\n};\r\nvar IN = [1, 2, 2, 3, 3, 4, 5, 5, 6, 6, 7, 7];\r\nvar IQ = \"P m M m M P d P m M m M\".split(\" \");\r\nvar fromSemitones = function (num) {\r\n    var d = num < 0 ? -1 : 1;\r\n    var n = Math.abs(num);\r\n    var c = n % 12;\r\n    var o = Math.floor(n / 12);\r\n    return d * (IN[c] + 7 * o) + IQ[c];\r\n};\n\nexport { names, tokenize, qToAlt, altToQ, props, num, name, semitones, chroma, ic, build, simplify, invert, fromSemitones };\n","/**\n * [![npm version](https://img.shields.io/npm/v/tonal-distance.svg)](https://www.npmjs.com/package/tonal-distance)\n * [![tonal](https://img.shields.io/badge/tonal-distance-yellow.svg)](https://github.com/danigb/tonal/tree/master/packages/tonal/distance)\n *\n * Transpose notes by intervals and find distances between notes\n *\n * @example\n * // es6\n * import * as Distance from \"tonal-distance\"\n * Distance.interval(\"C3\", \"C4\") // => \"1P\"\n *\n * @example\n * // es6 import selected functions\n * import { interval, semitones, transpose } from \"tonal-distance\"\n *\n * semitones(\"C\" ,\"D\") // => 2\n * interval(\"C4\", \"G4\") // => \"5P\"\n * transpose(\"C4\", \"P5\") // => \"G4\"\n *\n * @example\n * // included in tonal facade\n * const Tonal = require(\"tonal\");\n * Tonal.Distance.transpose(\"C4\", \"P5\")\n * Tonal.Distance.transposeBy(\"P5\", \"C4\")\n *\n * @module Distance\n */\nimport { props as noteProps, build as fromNote } from \"tonal-note\";\nimport { props as iprops, build as ibuild } from \"tonal-interval\";\n\n// Map from letter step to number of fifths starting from \"C\":\n// { C: 0, D: 2, E: 4, F: -1, G: 1, A: 3, B: 5 }\nvar FIFTHS = [0, 2, 4, -1, 1, 3, 5];\n\n// Given a number of fifths, return the octaves they span\nvar fOcts = function (f) { return Math.floor((f * 7) / 12); };\n\n// Get the number of octaves it span each step\nvar FIFTH_OCTS = FIFTHS.map(fOcts);\n\nvar encode = function (ref) {\n  var step = ref.step;\n  var alt = ref.alt;\n  var oct = ref.oct;\n  var dir = ref.dir; if ( dir === void 0 ) dir = 1;\n\n  var f = FIFTHS[step] + 7 * alt;\n  if (oct === null) { return [dir * f]; }\n  var o = oct - FIFTH_OCTS[step] - 4 * alt;\n  return [dir * f, dir * o];\n};\n\n// We need to get the steps from fifths\n// Fifths for CDEFGAB are [ 0, 2, 4, -1, 1, 3, 5 ]\n// We add 1 to fifths to avoid negative numbers, so:\n// for [\"F\", \"C\", \"G\", \"D\", \"A\", \"E\", \"B\"] we have:\nvar STEPS = [3, 0, 4, 1, 5, 2, 6];\n\n// Return the number of fifths as if it were unaltered\nfunction unaltered(f) {\n  var i = (f + 1) % 7;\n  return i < 0 ? 7 + i : i;\n}\n\nvar decode = function (f, o, dir) {\n  var step = STEPS[unaltered(f)];\n  var alt = Math.floor((f + 1) / 7);\n  if (o === undefined) { return { step: step, alt: alt, dir: dir }; }\n  var oct = o + 4 * alt + FIFTH_OCTS[step];\n  return { step: step, alt: alt, oct: oct, dir: dir };\n};\n\nvar memo = function (fn, cache) {\n  if ( cache === void 0 ) cache = {};\n\n  return function (str) { return cache[str] || (cache[str] = fn(str)); };\n};\n\nvar encoder = function (props) { return memo(function (str) {\n    var p = props(str);\n    return p.name === null ? null : encode(p);\n  }); };\n\nvar encodeNote = encoder(noteProps);\nvar encodeIvl = encoder(iprops);\n\n/**\n * Transpose a note by an interval. The note can be a pitch class.\n *\n * This function can be partially applied.\n *\n * @param {string} note\n * @param {string} interval\n * @return {string} the transposed note\n * @example\n * import { tranpose } from \"tonal-distance\"\n * transpose(\"d3\", \"3M\") // => \"F#3\"\n * // it works with pitch classes\n * transpose(\"D\", \"3M\") // => \"F#\"\n * // can be partially applied\n * [\"C\", \"D\", \"E\", \"F\", \"G\"].map(transpose(\"M3)) // => [\"E\", \"F#\", \"G#\", \"A\", \"B\"]\n */\nexport function transpose(note, interval) {\n  if (arguments.length === 1) { return function (i) { return transpose(note, i); }; }\n  var n = encodeNote(note);\n  var i = encodeIvl(interval);\n  if (n === null || i === null) { return null; }\n  var tr = n.length === 1 ? [n[0] + i[0]] : [n[0] + i[0], n[1] + i[1]];\n  return fromNote(decode(tr[0], tr[1]));\n}\n\n/**\n * Transpose a pitch class by a number of perfect fifths.\n *\n * It can be partially applied.\n *\n * @function\n * @param {string} pitchClass - the pitch class\n * @param {Integer} fifhts - the number of fifths\n * @return {string} the transposed pitch class\n *\n * @example\n * import { trFifths } from \"tonal-transpose\"\n * [0, 1, 2, 3, 4].map(trFifths(\"C\")) // => [\"C\", \"G\", \"D\", \"A\", \"E\"]\n * // or using tonal\n * Distance.trFifths(\"G4\", 1) // => \"D\"\n */\n\nexport function trFifths(note, fifths) {\n  if (arguments.length === 1) { return function (f) { return trFifths(note, f); }; }\n  var n = encodeNote(note);\n  if (n === null) { return null; }\n  return fromNote(decode(n[0] + fifths));\n}\n\n/**\n * Get the distance in fifths between pitch classes\n *\n * Can be partially applied.\n *\n * @param {string} to - note or pitch class\n * @param {string} from - note or pitch class\n */\nexport function fifths(from, to) {\n  if (arguments.length === 1) { return function (to) { return fifths(from, to); }; }\n  var f = encodeNote(from);\n  var t = encodeNote(to);\n  if (t === null || f === null) { return null; }\n  return t[0] - f[0];\n}\n\n/**\n * The same as transpose with the arguments inverted.\n *\n * Can be partially applied.\n *\n * @param {string} note\n * @param {string} interval\n * @return {string} the transposed note\n * @example\n * import { tranposeBy } from \"tonal-distance\"\n * transposeBy(\"3m\", \"5P\") // => \"7m\"\n */\nexport function transposeBy(interval, note) {\n  if (arguments.length === 1) { return function (n) { return transpose(n, interval); }; }\n  return transpose(note, interval);\n}\n\nvar isDescending = function (e) { return e[0] * 7 + e[1] * 12 < 0; };\nvar decodeIvl = function (i) { return isDescending(i) ? decode(-i[0], -i[1], -1) : decode(i[0], i[1], 1); };\n\nexport function addIntervals(ivl1, ivl2, dir) {\n  var i1 = encodeIvl(ivl1);\n  var i2 = encodeIvl(ivl2);\n  if (i1 === null || i2 === null) { return null; }\n  var i = [i1[0] + dir * i2[0], i1[1] + dir * i2[1]];\n  return ibuild(decodeIvl(i));\n}\n\n/**\n * Add two intervals\n *\n * Can be partially applied.\n *\n * @param {string} interval1\n * @param {string} interval2\n * @return {string} the resulting interval\n * @example\n * import { add } from \"tonal-distance\"\n * add(\"3m\", \"5P\") // => \"7m\"\n */\nexport function add(ivl1, ivl2) {\n  if (arguments.length === 1) { return function (i2) { return add(ivl1, i2); }; }\n  return addIntervals(ivl1, ivl2, 1);\n}\n\n/**\n * Subtract two intervals\n *\n * Can be partially applied\n *\n * @param {string} minuend\n * @param {string} subtrahend\n * @return {string} interval diference\n */\nexport function subtract(ivl1, ivl2) {\n  if (arguments.length === 1) { return function (i2) { return add(ivl1, i2); }; }\n  return addIntervals(ivl1, ivl2, -1);\n}\n\n/**\n * Find the interval between two pitches. It works with pitch classes\n * (both must be pitch classes and the interval is always ascending)\n *\n * Can be partially applied\n *\n * @param {string} from - distance from\n * @param {string} to - distance to\n * @return {string} the interval distance\n *\n * @example\n * import { interval } from \"tonal-distance\"\n * interval(\"C2\", \"C3\") // => \"P8\"\n * interval(\"G\", \"B\") // => \"M3\"\n *\n * @example\n * import * as Distance from \"tonal-distance\"\n * Distance.interval(\"M2\", \"P5\") // => \"P4\"\n */\nexport function interval(from, to) {\n  if (arguments.length === 1) { return function (t) { return interval(from, t); }; }\n  var f = encodeNote(from);\n  var t = encodeNote(to);\n  if (f === null || t === null || f.length !== t.length) { return null; }\n  var d =\n    f.length === 1\n      ? [t[0] - f[0], -Math.floor(((t[0] - f[0]) * 7) / 12)]\n      : [t[0] - f[0], t[1] - f[1]];\n  return ibuild(decodeIvl(d));\n}\n\n/**\n * Get the distance between two notes in semitones\n *\n * @param {String|Pitch} from - first note\n * @param {String|Pitch} to - last note\n * @return {Integer} the distance in semitones or null if not valid notes\n * @example\n * import { semitones } from \"tonal-distance\"\n * semitones(\"C3\", \"A2\") // => -3\n * // or use tonal\n * Tonal.Distance.semitones(\"C3\", \"G3\") // => 7\n */\nexport function semitones(from, to) {\n  if (arguments.length === 1) { return function (t) { return semitones(from, t); }; }\n  var f = noteProps(from);\n  var t = noteProps(to);\n  return f.midi !== null && t.midi !== null\n    ? t.midi - f.midi\n    : f.chroma !== null && t.chroma !== null\n      ? (t.chroma - f.chroma + 12) % 12\n      : null;\n}\n","/**\n * [![npm version](https://img.shields.io/npm/v/tonal-pcset.svg?style=flat-square)](https://www.npmjs.com/package/tonal-pcset)\n * [![tonal](https://img.shields.io/badge/tonal-pcset-yellow.svg?style=flat-square)](https://www.npmjs.com/browse/keyword/tonal)\n *\n * `tonal-pcset` is a collection of functions to work with pitch class sets, oriented\n * to make comparations (isEqual, isSubset, isSuperset)\n *\n * This is part of [tonal](https://www.npmjs.com/package/tonal) music theory library.\n *\n * You can install via npm: `npm i --save tonal-pcset`\n *\n * ```js\n * // es6\n * import PcSet from \"tonal-pcset\"\n * var PcSet = require(\"tonal-pcset\")\n *\n * PcSet.isEqual(\"c2 d5 e6\", \"c6 e3 d1\") // => true\n * ```\n *\n * ## API documentation\n *\n * @module PcSet\n */\nimport { chroma as notechr } from \"tonal-note\";\nimport { chroma as ivlchr } from \"tonal-interval\";\nimport { rotate, range, compact } from \"tonal-array\";\n\nvar chr = function (str) { return notechr(str) || ivlchr(str) || 0; };\nvar pcsetNum = function (set) { return parseInt(chroma(set), 2); };\nvar clen = function (chroma) { return chroma.replace(/0/g, \"\").length; };\n\n/**\n * Get chroma of a pitch class set. A chroma identifies each set uniquely.\n * It\"s a 12-digit binary each presenting one semitone of the octave.\n *\n * Note that this function accepts a chroma as parameter and return it\n * without modification.\n *\n * @param {Array|String} set - the pitch class set\n * @return {string} a binary representation of the pitch class set\n * @example\n * PcSet.chroma([\"C\", \"D\", \"E\"]) // => \"1010100000000\"\n */\nexport function chroma(set) {\n  if (isChroma(set)) { return set; }\n  if (!Array.isArray(set)) { return \"\"; }\n  var b = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0];\n  set.map(chr).forEach(function (i) {\n    b[i] = 1;\n  });\n  return b.join(\"\");\n}\n\nvar all = null;\n/**\n * Get a list of all possible chromas (all possible scales)\n * More information: http://allthescales.org/\n * @return {Array} an array of possible chromas from '10000000000' to '11111111111'\n *\n */\nexport function chromas(n) {\n  all = all || range(2048, 4095).map(function (n) { return n.toString(2); });\n  return typeof n === \"number\"\n    ? all.filter(function (chroma) { return clen(chroma) === n; })\n    : all.slice();\n}\n\n/**\n * Given a a list of notes or a pcset chroma, produce the rotations\n * of the chroma discarding the ones that starts with \"0\"\n *\n * This is used, for example, to get all the modes of a scale.\n *\n * @param {Array|String} set - the list of notes or pitchChr of the set\n * @param {Boolean} normalize - (Optional, true by default) remove all\n * the rotations that starts with \"0\"\n * @return {Array<String>} an array with all the modes of the chroma\n *\n * @example\n * PcSet.modes([\"C\", \"D\", \"E\"]).map(PcSet.intervals)\n */\nexport function modes(set, normalize) {\n  normalize = normalize !== false;\n  var binary = chroma(set).split(\"\");\n  return compact(\n    binary.map(function(_, i) {\n      var r = rotate(i, binary);\n      return normalize && r[0] === \"0\" ? null : r.join(\"\");\n    })\n  );\n}\n\nvar REGEX = /^[01]{12}$/;\n/**\n * Test if the given string is a pitch class set chroma.\n * @param {string} chroma - the pitch class set chroma\n * @return {Boolean} true if its a valid pcset chroma\n * @example\n * PcSet.isChroma(\"101010101010\") // => true\n * PcSet.isChroma(\"101001\") // => false\n */\nexport function isChroma(set) {\n  return REGEX.test(set);\n}\n\nvar IVLS = \"1P 2m 2M 3m 3M 4P 5d 5P 6m 6M 7m 7M\".split(\" \");\n/**\n * Given a pcset (notes or chroma) return it\"s intervals\n * @param {String|Array} pcset - the pitch class set (notes or chroma)\n * @return {Array} intervals or empty array if not valid pcset\n * @example\n * PcSet.intervals(\"1010100000000\") => [\"1P\", \"2M\", \"3M\"]\n */\nexport function intervals(set) {\n  if (!isChroma(set)) { return []; }\n  return compact(\n    set.split(\"\").map(function(d, i) {\n      return d === \"1\" ? IVLS[i] : null;\n    })\n  );\n}\n\n/**\n * Test if two pitch class sets are identical\n *\n * @param {Array|String} set1 - one of the pitch class sets\n * @param {Array|String} set2 - the other pitch class set\n * @return {Boolean} true if they are equal\n * @example\n * PcSet.isEqual([\"c2\", \"d3\"], [\"c5\", \"d2\"]) // => true\n */\nexport function isEqual(s1, s2) {\n  if (arguments.length === 1) { return function (s) { return isEqual(s1, s); }; }\n  return chroma(s1) === chroma(s2);\n}\n\n/**\n * Create a function that test if a collection of notes is a\n * subset of a given set\n *\n * The function can be partially applied\n *\n * @param {Array|String} set - an array of notes or a chroma set string to test against\n * @param {Array|String} notes - an array of notes or a chroma set\n * @return {boolean} true if notes is a subset of set, false otherwise\n * @example\n * const inCMajor = PcSet.isSubsetOf([\"C\", \"E\", \"G\"])\n * inCMajor([\"e6\", \"c4\"]) // => true\n * inCMajor([\"e6\", \"c4\", \"d3\"]) // => false\n */\nexport function isSubsetOf(set, notes) {\n  if (arguments.length > 1) { return isSubsetOf(set)(notes); }\n  set = pcsetNum(set);\n  return function(notes) {\n    notes = pcsetNum(notes);\n    return notes !== set && (notes & set) === notes;\n  };\n}\n\n/**\n * Create a function that test if a collectio of notes is a\n * superset of a given set (it contains all notes and at least one more)\n *\n * @param {Array|String} set - an array of notes or a chroma set string to test against\n * @param {Array|String} notes - an array of notes or a chroma set\n * @return {boolean} true if notes is a superset of set, false otherwise\n * @example\n * const extendsCMajor = PcSet.isSupersetOf([\"C\", \"E\", \"G\"])\n * extendsCMajor([\"e6\", \"a\", \"c4\", \"g2\"]) // => true\n * extendsCMajor([\"c6\", \"e4\", \"g3\"]) // => false\n */\nexport function isSupersetOf(set, notes) {\n  if (arguments.length > 1) { return isSupersetOf(set)(notes); }\n  set = pcsetNum(set);\n  return function(notes) {\n    notes = pcsetNum(notes);\n    return notes !== set && (notes | set) === notes;\n  };\n}\n\n/**\n * Test if a given pitch class set includes a note\n * @param {Array|String} set - the base set to test against\n * @param {String|Pitch} note - the note to test\n * @return {Boolean} true if the note is included in the pcset\n * @example\n * PcSet.includes([\"C\", \"D\", \"E\"], \"C4\") // => true\n * PcSet.includes([\"C\", \"D\", \"E\"], \"C#4\") // => false\n */\nexport function includes(set, note) {\n  if (arguments.length > 1) { return includes(set)(note); }\n  set = chroma(set);\n  return function(note) {\n    return set[chr(note)] === \"1\";\n  };\n}\n\n/**\n * Filter a list with a pitch class set\n *\n * @param {Array|String} set - the pitch class set notes\n * @param {Array|String} notes - the note list to be filtered\n * @return {Array} the filtered notes\n *\n * @example\n * PcSet.filter([\"C\", \"D\", \"E\"], [\"c2\", \"c#2\", \"d2\", \"c3\", \"c#3\", \"d3\"]) // => [ \"c2\", \"d2\", \"c3\", \"d3\" ])\n * PcSet.filter([\"C2\"], [\"c2\", \"c#2\", \"d2\", \"c3\", \"c#3\", \"d3\"]) // => [ \"c2\", \"c3\" ])\n */\nexport function filter(set, notes) {\n  if (arguments.length === 1) { return function (n) { return filter(set, n); }; }\n  return notes.filter(includes(set));\n}\n","/**\n * [![npm version](https://img.shields.io/npm/v/tonal-dictionary.svg)](https://www.npmjs.com/package/tonal-dictionary)\n *\n * `tonal-dictionary` contains a dictionary of musical scales and chords\n *\n * This is part of [tonal](https://www.npmjs.com/package/tonal) music theory library.\n *\n * @example\n * // es6\n * import * as Dictionary from \"tonal-dictionary\"\n * // es5\n * const Dictionary = require(\"tonal-dictionary\")\n *\n * @example\n * Dictionary.chord(\"Maj7\") // => [\"1P\", \"3M\", \"5P\", \"7M\"]\n *\n * @module Dictionary\n */\nimport sdata from \"./data/scales.json\";\nimport cdata from \"./data/chords.json\";\nimport { chroma } from \"tonal-pcset\";\n\nexport var dictionary = function (raw) {\n  var keys = Object.keys(raw).sort();\n  var data = [];\n  var index = [];\n\n  var add = function (name, ivls, chroma) {\n    data[name] = ivls;\n    index[chroma] = index[chroma] || [];\n    index[chroma].push(name);\n  };\n\n  keys.forEach(function (key) {\n    var ivls = raw[key][0].split(\" \");\n    var alias = raw[key][1];\n    var chr = chroma(ivls);\n\n    add(key, ivls, chr);\n    if (alias) { alias.forEach(function (a) { return add(a, ivls, chr); }); }\n  });\n  var allKeys = Object.keys(data).sort();\n\n  var dict = function (name) { return data[name]; };\n  dict.names = function (p) {\n    if (typeof p === \"string\") { return (index[p] || []).slice(); }\n    else { return (p === true ? allKeys : keys).slice(); }\n  };\n  return dict;\n};\n\nexport var combine = function (a, b) {\n  var dict = function (name) { return a(name) || b(name); };\n  dict.names = function (p) { return a.names(p).concat(b.names(p)); };\n  return dict;\n};\n\n/**\n * A dictionary of scales: a function that given a scale name (without tonic)\n * returns an array of intervals\n *\n * @function\n * @param {string} name\n * @return {Array} intervals\n * @example\n * import { scale } from \"tonal-dictionary\"\n * scale(\"major\") // => [\"1P\", \"2M\", ...]\n * scale.names(); // => [\"major\", ...]\n */\nexport var scale = dictionary(sdata);\n\n/**\n * A dictionary of chords: a function that given a chord type\n * returns an array of intervals\n *\n * @function\n * @param {string} type\n * @return {Array} intervals\n * @example\n * import { chord } from \"tonal-dictionary\"\n * chord(\"Maj7\") // => [\"1P\", \"3M\", ...]\n * chord.names(); // => [\"Maj3\", ...]\n */\nexport var chord = dictionary(cdata);\nexport var pcset = combine(scale, chord);\n","/**\n * [![npm version](https://img.shields.io/npm/v/tonal-scale.svg?style=flat-square)](https://www.npmjs.com/package/tonal-scale)\n *\n * A scale is a collection of pitches in ascending or descending order.\n *\n * This module provides functions to get and manipulate scales.\n *\n * @example\n * // es6\n * import * as Scale from \"tonal-scale\"\n * // es5\n * const Scale = require(\"tonal-scale\");\n *\n * @example\n * Scale.notes(\"Ab bebop\") // => [ \"Ab\", \"Bb\", \"C\", \"Db\", \"Eb\", \"F\", \"Gb\", \"G\" ]\n * Scale.names() => [\"major\", \"minor\", ...]\n * @module Scale\n */\nimport { name as noteName, pc } from \"tonal-note\";\nimport {\n  modes as pcsetModes,\n  chroma,\n  isSubsetOf,\n  isSupersetOf\n} from \"tonal-pcset\";\nimport { transpose } from \"tonal-distance\";\nimport { scale, chord } from \"tonal-dictionary\";\nimport { compact, unique, rotate } from \"tonal-array\";\n\nvar NO_SCALE = Object.freeze({\n  name: null,\n  intervals: [],\n  names: [],\n  chroma: null,\n  setnum: null\n});\n\nvar properties = function (name) {\n  var intervals = scale(name);\n  if (!intervals) { return NO_SCALE; }\n  var s = { intervals: intervals, name: name };\n  s.chroma = chroma(intervals);\n  s.setnum = parseInt(s.chroma, 2);\n  s.names = scale.names(s.chroma);\n  return Object.freeze(s);\n};\n\nvar memoize = function (fn, cache) { return function (str) { return cache[str] || (cache[str] = fn(str)); }; };\n\n/**\n * Get scale properties. It returns an object with:\n * - name: the scale name\n * - names: a list with all possible names (includes the current)\n * - intervals: an array with the scale intervals\n * - chroma:  scale croma (see pcset)\n * - setnum: scale chroma number\n *\n * @function\n * @param {string} name - the scale name (without tonic)\n * @return {Object}\n */\nexport var props = memoize(properties, {});\n\n/**\n * Return the available scale names\n *\n * @function\n * @param {boolean} [aliases=false] - true to include aliases\n * @return {Array} the scale names\n *\n * @example\n * Scale.names() // => [\"maj7\", ...]\n */\nexport var names = scale.names;\n\n/**\n * Given a scale name, return its intervals. The name can be the type and\n * optionally the tonic (which is ignored)\n *\n * It retruns an empty array when no scale found\n *\n * @function\n * @param {string} name - the scale name (tonic and type, tonic is optional)\n * @return {Array<string>} the scale intervals if is a known scale or an empty\n * array if no scale found\n * @example\n * Scale.intervals(\"major\") // => [ \"1P\", \"2M\", \"3M\", \"4P\", \"5P\", \"6M\", \"7M\" ]\n */\nexport var intervals = function (name) {\n  var p = tokenize(name);\n  return props(p[1]).intervals;\n};\n\n/**\n * Get the notes (pitch classes) of a scale.\n *\n * Note that it always returns an array, and the values are only pitch classes.\n *\n * @function\n * @param {string} tonic\n * @param {string} nameOrTonic - the scale name or tonic (if 2nd param)\n * @param {string} [name] - the scale name without tonic\n * @return {Array} a pitch classes array\n *\n * @example\n * Scale.notes(\"C\", \"major\") // => [ \"C\", \"D\", \"E\", \"F\", \"G\", \"A\", \"B\" ]\n * Scale.notes(\"C major\") // => [ \"C\", \"D\", \"E\", \"F\", \"G\", \"A\", \"B\" ]\n * Scale.notes(\"C4\", \"major\") // => [ \"C\", \"D\", \"E\", \"F\", \"G\", \"A\", \"B\" ]\n * Scale.notes(\"A4\", \"no-scale\") // => []\n * Scale.notes(\"blah\", \"major\") // => []\n */\nexport function notes(nameOrTonic, name) {\n  var p = tokenize(nameOrTonic);\n  name = name || p[1];\n  return intervals(name).map(transpose(p[0]));\n}\n\n/**\n * Check if the given name is a known scale from the scales dictionary\n *\n * @function\n * @param {string} name - the scale name\n * @return {Boolean}\n */\nexport function exists(name) {\n  var p = tokenize(name);\n  return scale(p[1]) !== undefined;\n}\n\n/**\n * Given a string with a scale name and (optionally) a tonic, split\n * that components.\n *\n * It retuns an array with the form [ name, tonic ] where tonic can be a\n * note name or null and name can be any arbitrary string\n * (this function doesn\"t check if that scale name exists)\n *\n * @function\n * @param {string} name - the scale name\n * @return {Array} an array [tonic, name]\n * @example\n * Scale.tokenize(\"C mixolydean\") // => [\"C\", \"mixolydean\"]\n * Scale.tokenize(\"anything is valid\") // => [\"\", \"anything is valid\"]\n * Scale.tokenize() // => [\"\", \"\"]\n */\nexport function tokenize(str) {\n  if (typeof str !== \"string\") { return [\"\", \"\"]; }\n  var i = str.indexOf(\" \");\n  var tonic = noteName(str.substring(0, i)) || noteName(str) || \"\";\n  var name = tonic !== \"\" ? str.substring(tonic.length + 1) : str;\n  return [tonic, name.length ? name : \"\"];\n}\n\n/**\n * Find mode names of a scale\n *\n * @function\n * @param {string} name - scale name\n * @example\n * Scale.modeNames(\"C pentatonic\") // => [\n *   [\"C\", \"major pentatonic\"],\n *   [\"D\", \"egyptian\"],\n *   [\"E\", \"malkos raga\"],\n *   [\"G\", \"ritusen\"],\n *   [\"A\", \"minor pentatonic\"]\n * ]\n */\nexport var modeNames = function (name) {\n  var ivls = intervals(name);\n  var tonics = notes(name);\n\n  return pcsetModes(ivls)\n    .map(function (chroma, i) {\n      var name = scale.names(chroma)[0];\n      if (name) { return [tonics[i] || ivls[i], name]; }\n    })\n    .filter(function (x) { return x; });\n};\n\n/**\n * Get all chords that fits a given scale\n *\n * @function\n * @param {string} name - the scale name\n * @return {Array<string>} - the chord names\n *\n * @example\n * Scale.chords(\"pentatonic\") // => [\"5\", \"64\", \"M\", \"M6\", \"Madd9\", \"Msus2\"]\n */\nexport var chords = function (name) {\n  var inScale = isSubsetOf(intervals(name));\n  return chord.names().filter(function (name) { return inScale(chord(name)); });\n};\n\n/**\n * Given an array of notes, return the scale: a pitch class set starting from\n * the first note of the array\n *\n * @function\n * @param {Array} notes\n * @return {Array}\n * @example\n * Scale.toScale(['C4', 'c3', 'C5', 'C4', 'c4']) // => [\"C\"]\n * Scale.toScale(['D4', 'c#5', 'A5', 'F#6']) // => [\"D\", \"F#\", \"A\", \"C#\"]\n */\nexport var toScale = function (notes) {\n  var pcset = compact(notes.map(pc));\n  if (!pcset.length) { return pcset; }\n  var tonic = pcset[0];\n  var scale = unique(pcset);\n  return rotate(scale.indexOf(tonic), scale);\n};\n\n/**\n * Get all scales names that are a superset of the given one\n * (has the same notes and at least one more)\n *\n * @function\n * @param {string} name\n * @return {Array} a list of scale names\n * @example\n * Scale.supersets(\"major\") // => [\"bebop\", \"bebop dominant\", \"bebop major\", \"chromatic\", \"ichikosucho\"]\n */\nexport var supersets = function (name) {\n  if (!intervals(name).length) { return []; }\n  var isSuperset = isSupersetOf(intervals(name));\n  return scale.names().filter(function (name) { return isSuperset(scale(name)); });\n};\n\n/**\n * Find all scales names that are a subset of the given one\n * (has less notes but all from the given scale)\n *\n * @function\n * @param {string} name\n * @return {Array} a list of scale names\n *\n * @example\n * Scale.subsets(\"major\") // => [\"ionian pentatonic\", \"major pentatonic\", \"ritusen\"]\n */\nexport var subsets = function (name) {\n  var isSubset = isSubsetOf(intervals(name));\n  return scale.names().filter(function (name) { return isSubset(scale(name)); });\n};\n","/**\n * [![npm version](https://img.shields.io/npm/v/tonal-chord.svg)](https://www.npmjs.com/package/tonal-chord)\n * [![tonal](https://img.shields.io/badge/tonal-chord-yellow.svg)](https://www.npmjs.com/browse/keyword/tonal)\n *\n * `tonal-chord` is a collection of functions to manipulate musical chords\n *\n * This is part of [tonal](https://www.npmjs.com/package/tonal) music theory library.\n *\n * @example\n * // es6\n * import * as Chord from \"tonal-chord\"\n * // es5\n * const Chord = require(\"tonal-chord\")\n *\n * @example\n * Chord.notes(\"CMaj7\") // => [\"C\", \"E\", \"G\", \"B\"]\n *\n * @module Chord\n */\nimport { tokenize as split } from \"tonal-note\";\nimport { transpose } from \"tonal-distance\";\nimport { chord } from \"tonal-dictionary\";\nimport { chroma, isSubsetOf, isSupersetOf } from \"tonal-pcset\";\n\n/**\n * Return the available chord names\n *\n * @function\n * @param {boolean} aliases - true to include aliases\n * @return {Array} the chord names\n *\n * @example\n * Chord.names() // => [\"maj7\", ...]\n */\nexport var names = chord.names;\n\nvar NO_CHORD = Object.freeze({\n  name: null,\n  names: [],\n  intervals: [],\n  chroma: null,\n  setnum: null\n});\n\nvar properties = function (name) {\n  var intervals = chord(name);\n  if (!intervals) { return NO_CHORD; }\n  var s = { intervals: intervals, name: name };\n  s.chroma = chroma(intervals);\n  s.setnum = parseInt(s.chroma, 2);\n  s.names = chord.names(s.chroma);\n  return s;\n};\n\nvar memo = function (fn, cache) {\n  if ( cache === void 0 ) cache = {};\n\n  return function (str) { return cache[str] || (cache[str] = fn(str)); };\n};\n\n/**\n * Get chord properties. It returns an object with:\n *\n * - name: the chord name\n * - names: a list with all possible names (includes the current)\n * - intervals: an array with the chord intervals\n * - chroma:  chord croma (see pcset)\n * - setnum: chord chroma number\n *\n * @function\n * @param {string} name - the chord name (without tonic)\n * @return {Object} an object with the properties or a object with all properties\n * set to null if not valid chord name\n */\nexport var props = memo(properties);\n\n/**\n * Get chord intervals. It always returns an array\n *\n * @function\n * @param {string} name - the chord name (optionally a tonic and type)\n * @return {Array<String>} a list of intervals or null if the type is not known\n */\nexport var intervals = function (name) { return props(tokenize(name)[1]).intervals; };\n\n/**\n * Get the chord notes of a chord. This function accepts either a chord name\n * (for example: \"Cmaj7\") or a list of notes.\n *\n * It always returns an array, even if the chord is not found.\n *\n * @function\n * @param {string} nameOrTonic - name of the chord or the tonic (if the second parameter is present)\n * @param {string} [name] - (Optional) name if the first parameter is the tonic\n * @return {Array} an array of notes or an empty array\n *\n * @example\n * Chord.notes(\"Cmaj7\") // => [\"C\", \"E\", \"G\", \"B\"]\n * Chord.notes(\"C\", \"maj7\") // => [\"C\", \"E\", \"G\", \"B\"]\n */\nexport function notes(nameOrTonic, name) {\n  if (name) { return props(name).intervals.map(transpose(nameOrTonic)); }\n  var ref = tokenize(nameOrTonic);\n  var tonic = ref[0];\n  var type = ref[1];\n  return props(type).intervals.map(transpose(tonic));\n}\n\n/**\n * Check if a given name correspond to a chord in the dictionary\n *\n * @function\n * @param {string} name\n * @return {Boolean}\n * @example\n * Chord.exists(\"CMaj7\") // => true\n * Chord.exists(\"Maj7\") // => true\n * Chord.exists(\"Ablah\") // => false\n */\nexport var exists = function (name) { return chord(tokenize(name)[1]) !== undefined; };\n\n/**\n * Get all chords names that are a superset of the given one\n * (has the same notes and at least one more)\n *\n * @function\n * @param {string} name\n * @return {Array} a list of chord names\n */\nexport var supersets = function (name) {\n  if (!intervals(name).length) { return []; }\n  var isSuperset = isSupersetOf(intervals(name));\n  return chord.names().filter(function (name) { return isSuperset(chord(name)); });\n};\n\n/**\n * Find all chords names that are a subset of the given one\n * (has less notes but all from the given chord)\n *\n * @function\n * @param {string} name\n * @return {Array} a list of chord names\n */\nexport var subsets = function (name) {\n  var isSubset = isSubsetOf(intervals(name));\n  return chord.names().filter(function (name) { return isSubset(chord(name)); });\n};\n\n// 6, 64, 7, 9, 11 and 13 are consider part of the chord\n// (see https://github.com/danigb/tonal/issues/55)\nvar NUM_TYPES = /^(6|64|7|9|11|13)$/;\n/**\n * Tokenize a chord name. It returns an array with the tonic and chord type\n * If not tonic is found, all the name is considered the chord name.\n *\n * This function does NOT check if the chord type exists or not. It only tries\n * to split the tonic and chord type.\n *\n * @function\n * @param {string} name - the chord name\n * @return {Array} an array with [tonic, type]\n * @example\n * Chord.tokenize(\"Cmaj7\") // => [ \"C\", \"maj7\" ]\n * Chord.tokenize(\"C7\") // => [ \"C\", \"7\" ]\n * Chord.tokenize(\"mMaj7\") // => [ \"\", \"mMaj7\" ]\n * Chord.tokenize(\"Cnonsense\") // => [ \"C\", \"nonsense\" ]\n */\nexport function tokenize(name) {\n  var p = split(name);\n  if (p[0] === \"\") { return [\"\", name]; }\n  // aug is augmented (see https://github.com/danigb/tonal/issues/55)\n  if (p[0] === \"A\" && p[3] === \"ug\") { return [\"\", \"aug\"]; }\n\n  if (NUM_TYPES.test(p[2])) {\n    return [p[0] + p[1], p[2] + p[3]];\n  } else {\n    return [p[0] + p[1] + p[2], p[3]];\n  }\n}\n","/**\n * [![npm version](https://img.shields.io/npm/v/tonal-key.svg?style=flat-square)](https://www.npmjs.com/package/tonal-key)\n *\n * The `Tonal` module is a facade to the rest of the modules. They are namespaced,\n * so for example to use `pc` function from `tonal-note` you have to write:\n * `Tonal.Note.pc`\n *\n * It exports the following modules:\n * - Note\n * - Interval\n * - Distance\n * - Scale\n * - Chord\n * - PcSet\n *\n * Additionally this facade exports some functions without namespace (see \"Methods\" below)\n *\n * @example\n * // es6 modules\n * import * as Tonal from \"tonal\"\n * Tonal.Note.name(\"cx\") // => \"C##\"\n *\n * @example\n * import { Note } from \"tonal\"\n * Note.name(\"bb\") // => \"Bb\"\n *\n * @example\n * // es5 node modules\n * var Tonal = require(\"tonal\");\n * Tonal.Distance.transpose(Tonal.Note.pc(\"C#2\"), \"M3\") // => \"E#\"\n * Tonal.Chord.notes(\"Dmaj7\") // => [\"D\", \"F#\", \"A\", \"C#\"]\n *\n * @module Tonal\n */\nimport * as Array from \"tonal-array\";\nimport * as Note from \"tonal-note\";\nimport * as Interval from \"tonal-interval\";\nimport * as Distance from \"tonal-distance\";\nimport * as Dictionary from \"tonal-dictionary\";\nimport * as Scale from \"tonal-scale\";\nimport * as Chord from \"tonal-chord\";\nimport * as PcSet from \"tonal-pcset\";\n\nexport { Array, Note, Interval, Distance, Scale, Chord, PcSet, Dictionary };\n\n/**\n * Transpose a note by an interval\n * @function\n * @param {string} note\n * @param {string} interval\n * @return {string} the transported note\n * @see Distance.transpose\n */\nexport const transpose = Distance.transpose;\n\n/**\n * Get the interval from two notes\n * @function\n * @param {string} from\n * @param {string} to\n * @return {string} the interval in reverse shorthand notation\n * @see Distance.interval\n */\nexport const interval = Distance.interval;\n\n/**\n * Get note properties\n * @function\n * @param {string} note - the note name\n * @return {Object}\n * @see Note.props\n * @example\n * Tonal.note(\"A4\").chroma // => 9\n */\nexport const note = Note.props;\n\n/**\n * Get midi note number\n * @function\n * @param {string} note\n * @return {Number}\n * @see Note.midi\n * @example\n * Tonal.midi(\"A4\") // => 49\n */\nexport const midi = Note.midi;\n\n/**\n * Get note frequency using equal tempered tuning at 440\n * @function\n * @param {string} note\n * @return {Number}\n * @see Note.freq\n * @example\n * Tonal.freq(\"A4\") // => 440\n */\nexport const freq = Note.freq;\n\n/**\n * Get intervals from a chord type\n * @function\n * @param {string} type - the chord type (no tonic)\n * @return {Array} an array of intervals or undefined if the chord type is not known\n * @see Dictionary.chord\n * @example\n * Tonal.chord(\"m7b5\") // => [\"1P\", \"3m\", \"5d\", \"7m\"]\n */\nexport const chord = Dictionary.chord;\n\n/**\n * Get intervals from scale name\n * @function\n * @param {string} name - the scale name (without tonic)\n * @return {Array} an array of intervals or undefiend if the scale is not kown\n * @example\n * Tonal.scale(\"major\") // => [\"1P\", \"2M\", \"3M\"...]\n */\nexport const scale = Dictionary.scale;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar scale_1 = require(\"./scale\");\nexports.scale = scale_1.getScale;\nexports.mode = scale_1.getScale;\nexports.scales = scale_1.scales;\nexports.modes = scale_1.scales;\nvar chord_1 = require(\"./chord\");\nexports.chord = chord_1.getChord;\nexports.chords = chord_1.chords;\nvar clip_1 = require(\"./clip\");\nexports.clip = clip_1.clip;\nvar progression_1 = require(\"./progression\");\nexports.getChordDegrees = progression_1.getChordDegrees;\nexports.getChordsByProgression = progression_1.getChordsByProgression;\nvar arp_1 = require(\"./arp\");\nexports.arp = arp_1.arp;\nvar midi_1 = require(\"./midi\");\nexports.midi = midi_1.midi;\nvar session_1 = require(\"./session\");\nexports.Session = session_1.Session;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar utils_1 = require(\"./utils\");\nvar defaultSubdiv = '4n';\nvar defaultDur = '8n';\n/**\n * @param  {Tone.js Player Object}\n * @return {Function}\n * Take a Tone.js Player and return a function that can be used\n * as the callback in Tone.Sequence https://tonejs.github.io/docs/r12/Sequence\n */\nvar getPlayerSeqFn = function (player) {\n    return function (time, el) {\n        if (el === 'x') {\n            player.start(time);\n        }\n    };\n};\n/**\n * @param  {Object}\n * @return {Function}\n * Take an object literal which has a Tone.js instrument and return a function that can be used\n * as the callback in Tone.Sequence https://tonejs.github.io/docs/r12/Sequence\n */\nvar getInstrSeqFn = function (params) {\n    var counter = 0;\n    return function (time, el) {\n        if (el === 'x' && params.notes[counter]) {\n            params.instrument.triggerAttackRelease(params.notes[counter], params.dur || params.subdiv || defaultDur, time);\n            counter++;\n            if (counter === params.notes.length) {\n                counter = 0;\n            }\n        }\n    };\n};\n/**\n * @param  {Object}\n * @return {Function}\n * Take an object literal which has a Tone.js instrument and return a function that can be used\n * as the callback in Tone.Sequence https://tonejs.github.io/docs/r12/Sequence\n */\nvar getMonoInstrSeqFn = function (params) {\n    var counter = 0;\n    return function (time, el) {\n        if (el === 'x' && params.notes[counter]) {\n            // in monophonic instruments the triggerAttackRelease takes the note directly\n            // In Scribbletune each note is an array by default to support chords\n            // hence we target the 0th element of each note\n            params.instrument.triggerAttackRelease(params.notes[counter][0], params.dur || params.subdiv || defaultDur, time);\n            counter++;\n            if (counter === params.notes.length) {\n                counter = 0;\n            }\n        }\n    };\n};\n/**\n * @param  {Object}\n * @return {Function}\n * Take an object literal which has a Tone.js sampler and return a function that can be used\n * as the callback in Tone.Sequence https://tonejs.github.io/docs/r12/Sequence\n */\nvar getSamplerSeqFn = function (params) {\n    var counter = 0;\n    return function (time, el) {\n        if (el === 'x' && params.notes[counter]) {\n            params.sampler.triggerAttackRelease(params.notes[counter], params.dur || params.subdiv || defaultDur, time);\n            counter++;\n            if (counter === params.notes.length) {\n                counter = 0;\n            }\n        }\n    };\n};\n/**\n * @param  {Object}\n * @return {Tone.js Sequence Object}\n * Take a object literal that may have a Tone.js player OR instrument\n * or simply a sample or synth with a pattern and return a Tone.js sequence\n */\nmodule.exports = function (params) {\n    var _a, _b, _c;\n    if (!params.pattern) {\n        throw new Error('No pattern provided!');\n    }\n    if (!params.player &&\n        !params.instrument &&\n        !params.sample &&\n        !params.synth &&\n        !params.sampler &&\n        !params.samples) {\n        throw new Error('No player or instrument provided!');\n    }\n    /*\n      1. The params object can be used to pass a sample (sound source) OR a synth(Synth/FMSynth/AMSynth etc) or samples.\n      Scribbletune will then create a Tone.js Player or Tone.js Instrument or Tone.js Sampler respectively\n      2. It can also be used to pass a Tone.js Player object or instrument that was created elsewhere\n      (mostly by Scribbletune itself in the channel creation method)\n      Either ways, a pattern is required and it will be used to create a playable Tone.js Sequence\n       */\n    var effects = [];\n    if (params.effects) {\n        effects = params.effects.map(function (eff) { return new Tone[eff](); });\n    }\n    effects.push(new Tone.Gain({\n        gain: params.volume || 1,\n    }));\n    if (params.sample) {\n        // This implies, the clip is probably being hand created by the user with a audio sample\n        params.player = new Tone.Player(params.sample);\n    }\n    if (params.samples) {\n        params.sampler = new Tone.Sampler(params.samples);\n    }\n    if (params.synth) {\n        // This implies, the synth is probably being hand created by the user with an available Tone synth\n        params.instrument = new Tone[params.synth]();\n    }\n    if (params.player) {\n        (_a = params.player).chain.apply(_a, effects.concat([Tone.Master]));\n        // This implies, a player object was already created (either by user or by Scribbletune during channel creation)\n        return new Tone.Sequence(getPlayerSeqFn(params.player), utils_1.expandStr(params.pattern), params.subdiv || defaultSubdiv);\n    }\n    if (params.sampler) {\n        (_b = params.sampler).chain.apply(_b, effects.concat([Tone.Master]));\n        // This implies, a sampler object was already created (either by user or by Scribbletune during channel creation)\n        return new Tone.Sequence(getSamplerSeqFn(params), utils_1.expandStr(params.pattern), params.subdiv || defaultSubdiv);\n    }\n    if (params.instrument) {\n        (_c = params.instrument).chain.apply(_c, effects.concat([Tone.Master]));\n        // This implies, the instrument was already created (either by user or by Scribbletune during channel creation)\n        // Unlike player, the instrument needs the entire params object to construct a sequence\n        return new Tone.Sequence(params.instrument.voices\n            ? getInstrSeqFn(params)\n            : getMonoInstrSeqFn(params), utils_1.expandStr(params.pattern), params.subdiv || defaultSubdiv);\n    }\n};\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar scale_1 = require(\"./scale\");\n/**\n * Get the chords that go with a given scale/mode\n * This is useful only in case you want to check what chords work with a scale/mode\n * so that you can come up with chord progressions\n * @param  {String} mode e.g. major\n * @return {Array} e.g.['I', 'ii', 'iii', 'IV', 'V', 'vi', 'vii°']\n */\nexports.getChordDegrees = function (mode) {\n    var theRomans = {\n        ionian: ['I', 'ii', 'iii', 'IV', 'V', 'vi', 'vii°'],\n        dorian: ['i', 'ii', 'III', 'IV', 'v', 'vi°', 'VII'],\n        phrygian: ['i', 'II', 'III', 'iv', 'v°', 'VI', 'vii'],\n        lydian: ['I', 'II', 'iii', 'iv°', 'V', 'vi', 'vii'],\n        mixolydian: ['I', 'ii', 'iii°', 'IV', 'v', 'vi', 'VII'],\n        aeolian: ['i', 'ii°', 'III', 'iv', 'v', 'VI', 'VII'],\n        locrian: ['i°', 'II', 'iii', 'iv', 'V', 'VI', 'vii'],\n        'melodic minor': ['i', 'ii', 'III+', 'IV', 'V', 'vi°', 'vii°'],\n        'harmonic minor': ['i', 'ii°', 'III+', 'iv', 'V', 'VI', 'vii°'],\n    };\n    theRomans.major = theRomans.ionian;\n    theRomans.minor = theRomans.aeolian;\n    return theRomans[mode] || [];\n};\nvar idxByDegree = {\n    i: 0,\n    ii: 1,\n    iii: 2,\n    iv: 3,\n    v: 4,\n    vi: 5,\n    vii: 6,\n};\n/**\n * Get a chord name from degree\n * @param  {String} roman e.g. ii OR ii° OR V7\n * @return {String} e.g. m OR m7b5 OR Maj7\n */\nvar getChordName = function (roman) {\n    // remove any non character\n    var str = roman.replace(/\\W/g, '');\n    var prefix = 'M';\n    // check if it s lowercase\n    if (str.toLowerCase() === str) {\n        prefix = 'm';\n    }\n    if (roman.includes('°')) {\n        return prefix + '7b5';\n    }\n    if (roman.includes('+')) {\n        return prefix + '#5';\n    }\n    if (roman.includes('7')) {\n        return prefix === 'M' ? 'Maj7' : 'm7';\n    }\n    return prefix;\n};\n/**\n * Take the specified scale and degrees and return the chord names for them\n * These can be used as the value for the `notes` param of the `clip` method\n * @param {String} noteOctaveScale e.g. 'C4 major'\n * @param  {String} chordDegress e.g. 'I IV V IV'\n * @return {String} e.g. 'CM FM GM FM'\n */\nexports.getChordsByProgression = function (noteOctaveScale, chordDegress) {\n    // Set the octave if missing\n    // For example if the method was called with `C major` instead of `C4 major`, then add the 4\n    var noteOctaveScaleArr = noteOctaveScale.split(' ');\n    if (!noteOctaveScaleArr[0].match(/\\d/)) {\n        noteOctaveScaleArr[0] += '4';\n        noteOctaveScale = noteOctaveScaleArr.join(' ');\n    }\n    // Get the scale from the given note and scale/mode combination\n    var mode = scale_1.getScale(noteOctaveScale);\n    var chordDegreesArr = chordDegress.replace(/\\s*,+\\s*/g, ' ').split(' ');\n    // Now we have something like ['i', 'ii', 'IV']\n    // Convert it to a chord family such as ['Cm', 'Dm', 'FM']\n    var chordFamily = chordDegreesArr.map(function (roman, idx) {\n        var chordName = getChordName(roman); // e.g. m\n        // get the index to be used by removing any digit or non alphabet character\n        var scaleId = idxByDegree[roman.replace(/\\W|\\d/g, '').toLowerCase()]; // e.g. 0\n        // get the note itself\n        var note = mode[scaleId]; // e.g. C\n        // get the octave of the note;\n        var oct = note.replace(/\\D+/, ''); // e.g. 4\n        // now get the chord\n        return note.replace(/\\d/, '') + chordName + '-' + oct;\n    });\n    return chordFamily.toString().replace(/,/g, ' ');\n};\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar chord_1 = require(\"./chord\");\n/**\n * Take an array and fill it with it s own elements in the next octave till it s of the specified `len`\n * @param  {Array} arr e.g. ['a4', 'b4']\n * @param  {Number} e.g. len 4\n * @return {Array} e.g. ['a4', 'b4', 'a5', 'b5']\n */\nvar fillArr = function (arr, len) {\n    var bumpOctave = function (el) {\n        var note = el.replace(/\\d/, '');\n        var oct = el.replace(/\\D/g, '');\n        return note + (+oct + 1);\n    };\n    // Create a couple of chord arrays with bumped octaves\n    // so that something like [c3, e3, g4] turns into [c4, e4, g5] and [c5, e5, g6]\n    var arr1 = arr.map(bumpOctave);\n    var arr2 = arr1.map(bumpOctave);\n    var finalArr = arr.concat(arr1, arr2);\n    // Slice and return only as much as required\n    return finalArr.slice(0, len);\n};\n/**\n *\n * @param chordsOrParams a string that denotes comma seprated chords to be used or an object with additional properties\n * By default, if this is a string, the the count of notes generated is 8 and the order is ascending.\n * For instance arp('CM FM') will result in an array of notes [C4, E4, G4, F4, A4, C4, C5, E5]\n */\nexports.arp = function (chordsOrParams) {\n    var finalArr = [];\n    var params = {\n        count: 8,\n        order: '01234567',\n        chords: '',\n    };\n    if (typeof chordsOrParams === 'string') {\n        params.chords = chordsOrParams;\n    }\n    else {\n        Object.assign(params, chordsOrParams);\n    }\n    if (params.count > 8 || params.count < 2) {\n        throw new TypeError('Invalid value for count');\n    }\n    if (params.order.match(/\\D/g) ||\n        params.order.includes('8') ||\n        params.order.includes('9')) {\n        throw new TypeError('Invalid value for order');\n    }\n    var chordsArr = params.chords.split(' ');\n    var _loop_1 = function (chord) {\n        var filledArr = fillArr(chord_1.getChord(chord), params.count);\n        // reorder the filledArr as per params.order\n        var reorderedArr = params.order\n            .split('')\n            .map(function (idx) { return filledArr[idx]; });\n        finalArr = finalArr.concat(reorderedArr);\n    };\n    for (var _i = 0, chordsArr_1 = chordsArr; _i < chordsArr_1.length; _i++) {\n        var chord = chordsArr_1[_i];\n        _loop_1(chord);\n    }\n    return finalArr;\n};\n","\"use strict\";\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nvar __importStar = (this && this.__importStar) || function (mod) {\n    if (mod && mod.__esModule) return mod;\n    var result = {};\n    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];\n    result[\"default\"] = mod;\n    return result;\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar fs_1 = __importDefault(require(\"fs\"));\nvar jsmidgen = __importStar(require(\"jsmidgen\"));\n/**\n * Take an array of note objects to generate a MIDI file in the same location as this method is called\n * @param  {<Array>NoteObject} notes    Notes are in the format: {note: ['c3'], level: 127, length: 64}\n * @param  {String | null} fileName If a filename is not provided, then `music.mid` is used by default\n * If `null` is passed for `fileName`, bytes are returned instead of creating a file\n */\nexports.midi = function (notes, fileName) {\n    if (fileName === void 0) { fileName = 'music.mid'; }\n    var file = createFileFromNotes(notes);\n    var bytes = file.toBytes();\n    if (fileName === null) {\n        return bytes;\n    }\n    if (!fileName.endsWith('.mid')) {\n        fileName = fileName + '.mid';\n    }\n    fs_1.default.writeFileSync(fileName, bytes, 'binary');\n    console.log(\"MIDI file generated: \" + fileName + \".\");\n};\nfunction createFileFromNotes(notes) {\n    var file = new jsmidgen.File();\n    var track = new jsmidgen.Track();\n    file.addTrack(track);\n    for (var _i = 0, notes_1 = notes; _i < notes_1.length; _i++) {\n        var noteObj = notes_1[_i];\n        var level = noteObj.level || 127;\n        // While writing chords (multiple notes per tick)\n        // only the first noteOn (or noteOff) needs the complete arity of the function call\n        // subsequent calls need only the first 2 args (channel and note)\n        if (noteObj.note) {\n            if (typeof noteObj.note === 'string') {\n                track.noteOn(0, noteObj.note, noteObj.length, level); // channel, pitch(note), length, velocity\n                track.noteOff(0, noteObj.note, noteObj.length, level);\n            }\n            else {\n                track.addChord(0, noteObj.note, noteObj.length, level);\n            }\n        }\n        else {\n            track.noteOff(0, '', noteObj.length);\n        }\n    }\n    return file;\n}\n","module.exports = __WEBPACK_EXTERNAL_MODULE__12__;","var Midi = {};\n\n(function(exported) {\n\n\tvar DEFAULT_VOLUME   = exported.DEFAULT_VOLUME   = 90;\n\tvar DEFAULT_DURATION = exported.DEFAULT_DURATION = 128;\n\tvar DEFAULT_CHANNEL  = exported.DEFAULT_CHANNEL  = 0;\n\n\t/* ******************************************************************\n\t * Utility functions\n\t ****************************************************************** */\n\n\tvar Util = {\n\n\t\tmidi_letter_pitches: { a:21, b:23, c:12, d:14, e:16, f:17, g:19 },\n\n\t\t/**\n\t\t * Convert a symbolic note name (e.g. \"c4\") to a numeric MIDI pitch (e.g.\n\t\t * 60, middle C).\n\t\t *\n\t\t * @param {string} n - The symbolic note name to parse.\n\t\t * @returns {number} The MIDI pitch that corresponds to the symbolic note\n\t\t * name.\n\t\t */\n\t\tmidiPitchFromNote: function(n) {\n\t\t\tvar matches = /([a-g])(#+|b+)?([0-9]+)$/i.exec(n);\n\t\t\tvar note = matches[1].toLowerCase(), accidental = matches[2] || '', octave = parseInt(matches[3], 10);\n\t\t\treturn (12 * octave) + Util.midi_letter_pitches[note] + (accidental.substr(0,1)=='#'?1:-1) * accidental.length;\n\t\t},\n\n\t\t/**\n\t\t * Ensure that the given argument is converted to a MIDI pitch. Note that\n\t\t * it may already be one (including a purely numeric string).\n\t\t *\n\t\t * @param {string|number} p - The pitch to convert.\n\t\t * @returns {number} The resulting numeric MIDI pitch.\n\t\t */\n\t\tensureMidiPitch: function(p) {\n\t\t\tif (typeof p == 'number' || !/[^0-9]/.test(p)) {\n\t\t\t\t// numeric pitch\n\t\t\t\treturn parseInt(p, 10);\n\t\t\t} else {\n\t\t\t\t// assume it's a note name\n\t\t\t\treturn Util.midiPitchFromNote(p);\n\t\t\t}\n\t\t},\n\n\t\tmidi_pitches_letter: { '12':'c', '13':'c#', '14':'d', '15':'d#', '16':'e', '17':'f', '18':'f#', '19':'g', '20':'g#', '21':'a', '22':'a#', '23':'b' },\n\t\tmidi_flattened_notes: { 'a#':'bb', 'c#':'db', 'd#':'eb', 'f#':'gb', 'g#':'ab' },\n\n\t\t/**\n\t\t * Convert a numeric MIDI pitch value (e.g. 60) to a symbolic note name\n\t\t * (e.g. \"c4\").\n\t\t *\n\t\t * @param {number} n - The numeric MIDI pitch value to convert.\n\t\t * @param {boolean} [returnFlattened=false] - Whether to prefer flattened\n\t\t * notes to sharpened ones. Optional, default false.\n\t\t * @returns {string} The resulting symbolic note name.\n\t\t */\n\t\tnoteFromMidiPitch: function(n, returnFlattened) {\n\t\t\tvar octave = 0, noteNum = n, noteName, returnFlattened = returnFlattened || false;\n\t\t\tif (n > 23) {\n\t\t\t\t// noteNum is on octave 1 or more\n\t\t\t\toctave = Math.floor(n/12) - 1;\n\t\t\t\t// subtract number of octaves from noteNum\n\t\t\t\tnoteNum = n - octave * 12;\n\t\t\t}\n\n\t\t\t// get note name (c#, d, f# etc)\n\t\t\tnoteName = Util.midi_pitches_letter[noteNum];\n\t\t\t// Use flattened notes if requested (e.g. f# should be output as gb)\n\t\t\tif (returnFlattened && noteName.indexOf('#') > 0) {\n\t\t\t\tnoteName = Util.midi_flattened_notes[noteName];\n\t\t\t}\n\t\t\treturn noteName + octave;\n\t\t},\n\n\t\t/**\n\t\t * Convert beats per minute (BPM) to microseconds per quarter note (MPQN).\n\t\t *\n\t\t * @param {number} bpm - A number in beats per minute.\n\t\t * @returns {number} The number of microseconds per quarter note.\n\t\t */\n\t\tmpqnFromBpm: function(bpm) {\n\t\t\tvar mpqn = Math.floor(60000000 / bpm);\n\t\t\tvar ret=[];\n\t\t\tdo {\n\t\t\t\tret.unshift(mpqn & 0xFF);\n\t\t\t\tmpqn >>= 8;\n\t\t\t} while (mpqn);\n\t\t\twhile (ret.length < 3) {\n\t\t\t\tret.push(0);\n\t\t\t}\n\t\t\treturn ret;\n\t\t},\n\n\t\t/**\n\t\t * Convert microseconds per quarter note (MPQN) to beats per minute (BPM).\n\t\t *\n\t\t * @param {number} mpqn - The number of microseconds per quarter note.\n\t\t * @returns {number} A number in beats per minute.\n\t\t */\n\t\tbpmFromMpqn: function(mpqn) {\n\t\t\tvar m = mpqn;\n\t\t\tif (typeof mpqn[0] != 'undefined') {\n\t\t\t\tm = 0;\n\t\t\t\tfor (var i=0, l=mpqn.length-1; l >= 0; ++i, --l) {\n\t\t\t\t\tm |= mpqn[i] << l;\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn Math.floor(60000000 / mpqn);\n\t\t},\n\n\t\t/**\n\t\t * Converts an array of bytes to a string of hexadecimal characters. Prepares\n\t\t * it to be converted into a base64 string.\n\t\t *\n\t\t * @param {Array} byteArray - Array of bytes to be converted.\n\t\t * @returns {string} Hexadecimal string, e.g. \"097B8A\".\n\t\t */\n\t\tcodes2Str: function(byteArray) {\n\t\t\treturn String.fromCharCode.apply(null, byteArray);\n\t\t},\n\n\t\t/**\n\t\t * Converts a string of hexadecimal values to an array of bytes. It can also\n\t\t * add remaining \"0\" nibbles in order to have enough bytes in the array as the\n\t\t * `finalBytes` parameter.\n\t\t *\n\t\t * @param {string} str - string of hexadecimal values e.g. \"097B8A\"\n\t\t * @param {number} [finalBytes] - Optional. The desired number of bytes\n\t\t * (not nibbles) that the returned array should contain.\n\t\t * @returns {Array} An array of nibbles.\n\t\t */\n\t\tstr2Bytes: function (str, finalBytes) {\n\t\t\tif (finalBytes) {\n\t\t\t\twhile ((str.length / 2) < finalBytes) { str = \"0\" + str; }\n\t\t\t}\n\n\t\t\tvar bytes = [];\n\t\t\tfor (var i=str.length-1; i>=0; i = i-2) {\n\t\t\t\tvar chars = i === 0 ? str[i] : str[i-1] + str[i];\n\t\t\t\tbytes.unshift(parseInt(chars, 16));\n\t\t\t}\n\n\t\t\treturn bytes;\n\t\t},\n\n\t\t/**\n\t\t * Translates number of ticks to MIDI timestamp format, returning an array\n\t\t * of bytes with the time values. MIDI has a very particular way to express\n\t\t * time; take a good look at the spec before ever touching this function.\n\t\t *\n\t\t * @param {number} ticks - Number of ticks to be translated.\n\t\t * @returns {number} Array of bytes that form the MIDI time value.\n\t\t */\n\t\ttranslateTickTime: function(ticks) {\n\t\t\tvar buffer = ticks & 0x7F;\n\n\t\t\twhile (ticks = ticks >> 7) {\n\t\t\t\tbuffer <<= 8;\n\t\t\t\tbuffer |= ((ticks & 0x7F) | 0x80);\n\t\t\t}\n\n\t\t\tvar bList = [];\n\t\t\twhile (true) {\n\t\t\t\tbList.push(buffer & 0xff);\n\n\t\t\t\tif (buffer & 0x80) { buffer >>= 8; }\n\t\t\t\telse { break; }\n\t\t\t}\n\t\t\treturn bList;\n\t\t},\n\n\t};\n\n\t/* ******************************************************************\n\t * Event class\n\t ****************************************************************** */\n\n\t/**\n\t * Construct a MIDI event.\n\t *\n\t * Parameters include:\n\t *  - time [optional number] - Ticks since previous event.\n\t *  - type [required number] - Type of event.\n\t *  - channel [required number] - Channel for the event.\n\t *  - param1 [required number] - First event parameter.\n\t *  - param2 [optional number] - Second event parameter.\n\t */\n\tvar MidiEvent = function(params) {\n\t\tif (!this) return new MidiEvent(params);\n\t\tif (params &&\n\t\t\t\t(params.type    !== null || params.type    !== undefined) &&\n\t\t\t\t(params.channel !== null || params.channel !== undefined) &&\n\t\t\t\t(params.param1  !== null || params.param1  !== undefined)) {\n\t\t\tthis.setTime(params.time);\n\t\t\tthis.setType(params.type);\n\t\t\tthis.setChannel(params.channel);\n\t\t\tthis.setParam1(params.param1);\n\t\t\tthis.setParam2(params.param2);\n\t\t}\n\t};\n\n\t// event codes\n\tMidiEvent.NOTE_OFF           = 0x80;\n\tMidiEvent.NOTE_ON            = 0x90;\n\tMidiEvent.AFTER_TOUCH        = 0xA0;\n\tMidiEvent.CONTROLLER         = 0xB0;\n\tMidiEvent.PROGRAM_CHANGE     = 0xC0;\n\tMidiEvent.CHANNEL_AFTERTOUCH = 0xD0;\n\tMidiEvent.PITCH_BEND         = 0xE0;\n\n\n\t/**\n\t * Set the time for the event in ticks since the previous event.\n\t *\n\t * @param {number} ticks - The number of ticks since the previous event. May\n\t * be zero.\n\t */\n\tMidiEvent.prototype.setTime = function(ticks) {\n\t\tthis.time = Util.translateTickTime(ticks || 0);\n\t};\n\n\t/**\n\t * Set the type of the event. Must be one of the event codes on MidiEvent.\n\t *\n\t * @param {number} type - Event type.\n\t */\n\tMidiEvent.prototype.setType = function(type) {\n\t\tif (type < MidiEvent.NOTE_OFF || type > MidiEvent.PITCH_BEND) {\n\t\t\tthrow new Error(\"Trying to set an unknown event: \" + type);\n\t\t}\n\n\t\tthis.type = type;\n\t};\n\n\t/**\n\t * Set the channel for the event. Must be between 0 and 15, inclusive.\n\t *\n\t * @param {number} channel - The event channel.\n\t */\n\tMidiEvent.prototype.setChannel = function(channel) {\n\t\tif (channel < 0 || channel > 15) {\n\t\t\tthrow new Error(\"Channel is out of bounds.\");\n\t\t}\n\n\t\tthis.channel = channel;\n\t};\n\n\t/**\n\t * Set the first parameter for the event. Must be between 0 and 255,\n\t * inclusive.\n\t *\n\t * @param {number} p - The first event parameter value.\n\t */\n\tMidiEvent.prototype.setParam1 = function(p) {\n\t\tthis.param1 = p;\n\t};\n\n\t/**\n\t * Set the second parameter for the event. Must be between 0 and 255,\n\t * inclusive.\n\t *\n\t * @param {number} p - The second event parameter value.\n\t */\n\tMidiEvent.prototype.setParam2 = function(p) {\n\t\tthis.param2 = p;\n\t};\n\n\t/**\n\t * Serialize the event to an array of bytes.\n\t *\n\t * @returns {Array} The array of serialized bytes.\n\t */\n\tMidiEvent.prototype.toBytes = function() {\n\t\tvar byteArray = [];\n\n\t\tvar typeChannelByte = this.type | (this.channel & 0xF);\n\n\t\tbyteArray.push.apply(byteArray, this.time);\n\t\tbyteArray.push(typeChannelByte);\n\t\tbyteArray.push(this.param1);\n\n\t\t// Some events don't have a second parameter\n\t\tif (this.param2 !== undefined && this.param2 !== null) {\n\t\t\tbyteArray.push(this.param2);\n\t\t}\n\t\treturn byteArray;\n\t};\n\n\t/* ******************************************************************\n\t * MetaEvent class\n\t ****************************************************************** */\n\n\t/**\n\t * Construct a meta event.\n\t *\n\t * Parameters include:\n\t *  - time [optional number] - Ticks since previous event.\n\t *  - type [required number] - Type of event.\n\t *  - data [optional array|string] - Event data.\n\t */\n\tvar MetaEvent = function(params) {\n\t\tif (!this) return new MetaEvent(params);\n\t\tvar p = params || {};\n\t\tthis.setTime(params.time);\n\t\tthis.setType(params.type);\n\t\tthis.setData(params.data);\n\t};\n\n\tMetaEvent.SEQUENCE   = 0x00;\n\tMetaEvent.TEXT       = 0x01;\n\tMetaEvent.COPYRIGHT  = 0x02;\n\tMetaEvent.TRACK_NAME = 0x03;\n\tMetaEvent.INSTRUMENT = 0x04;\n\tMetaEvent.LYRIC      = 0x05;\n\tMetaEvent.MARKER     = 0x06;\n\tMetaEvent.CUE_POINT  = 0x07;\n\tMetaEvent.CHANNEL_PREFIX = 0x20;\n\tMetaEvent.END_OF_TRACK   = 0x2f;\n\tMetaEvent.TEMPO      = 0x51;\n\tMetaEvent.SMPTE      = 0x54;\n\tMetaEvent.TIME_SIG   = 0x58;\n\tMetaEvent.KEY_SIG    = 0x59;\n\tMetaEvent.SEQ_EVENT  = 0x7f;\n\n\t/**\n\t * Set the time for the event in ticks since the previous event.\n\t *\n\t * @param {number} ticks - The number of ticks since the previous event. May\n\t * be zero.\n\t */\n\tMetaEvent.prototype.setTime = function(ticks) {\n\t\tthis.time = Util.translateTickTime(ticks || 0);\n\t};\n\n\t/**\n\t * Set the type of the event. Must be one of the event codes on MetaEvent.\n\t *\n\t * @param {number} t - Event type.\n\t */\n\tMetaEvent.prototype.setType = function(t) {\n\t\tthis.type = t;\n\t};\n\n\t/**\n\t * Set the data associated with the event. May be a string or array of byte\n\t * values.\n\t *\n\t * @param {string|Array} d - Event data.\n\t */\n\tMetaEvent.prototype.setData = function(d) {\n\t\tthis.data = d;\n\t};\n\n\t/**\n\t * Serialize the event to an array of bytes.\n\t *\n\t * @returns {Array} The array of serialized bytes.\n\t */\n\tMetaEvent.prototype.toBytes = function() {\n\t\tif (!this.type) {\n\t\t\tthrow new Error(\"Type for meta-event not specified.\");\n\t\t}\n\n\t\tvar byteArray = [];\n\t\tbyteArray.push.apply(byteArray, this.time);\n\t\tbyteArray.push(0xFF, this.type);\n\n\t\t// If data is an array, we assume that it contains several bytes. We\n\t\t// apend them to byteArray.\n\t\tif (Array.isArray(this.data)) {\n\t\t\tbyteArray.push(this.data.length);\n\t\t\tbyteArray.push.apply(byteArray, this.data);\n\t\t} else if (typeof this.data == 'number') {\n\t\t\tbyteArray.push(1, this.data);\n\t\t} else if (this.data !== null && this.data !== undefined) {\n\t\t\t// assume string; may be a bad assumption\n\t\t\tbyteArray.push(this.data.length);\n\t\t\tvar dataBytes = this.data.split('').map(function(x){ return x.charCodeAt(0) });\n\t\t\tbyteArray.push.apply(byteArray, dataBytes);\n\t\t} else {\n\t\t\tbyteArray.push(0);\n\t\t}\n\n\t\treturn byteArray;\n\t};\n\n\t/* ******************************************************************\n\t * Track class\n\t ****************************************************************** */\n\n\t/**\n\t * Construct a MIDI track.\n\t *\n\t * Parameters include:\n\t *  - events [optional array] - Array of events for the track.\n\t */\n\tvar Track = function(config) {\n\t\tif (!this) return new Track(config);\n\t\tvar c = config || {};\n\t\tthis.events = c.events || [];\n\t};\n\n\tTrack.START_BYTES = [0x4d, 0x54, 0x72, 0x6b];\n\tTrack.END_BYTES   = [0x00, 0xFF, 0x2F, 0x00];\n\n\t/**\n\t * Add an event to the track.\n\t *\n\t * @param {MidiEvent|MetaEvent} event - The event to add.\n\t * @returns {Track} The current track.\n\t */\n\tTrack.prototype.addEvent = function(event) {\n\t\tthis.events.push(event);\n\t\treturn this;\n\t};\n\n\t/**\n\t * Add a note-on event to the track.\n\t *\n\t * @param {number} channel - The channel to add the event to.\n\t * @param {number|string} pitch - The pitch of the note, either numeric or\n\t * symbolic.\n\t * @param {number} [time=0] - The number of ticks since the previous event,\n\t * defaults to 0.\n\t * @param {number} [velocity=90] - The volume for the note, defaults to\n\t * DEFAULT_VOLUME.\n\t * @returns {Track} The current track.\n\t */\n\tTrack.prototype.addNoteOn = Track.prototype.noteOn = function(channel, pitch, time, velocity) {\n\t\tthis.events.push(new MidiEvent({\n\t\t\ttype: MidiEvent.NOTE_ON,\n\t\t\tchannel: channel,\n\t\t\tparam1: Util.ensureMidiPitch(pitch),\n\t\t\tparam2: velocity || DEFAULT_VOLUME,\n\t\t\ttime: time || 0,\n\t\t}));\n\t\treturn this;\n\t};\n\n\t/**\n\t * Add a note-off event to the track.\n\t *\n\t * @param {number} channel - The channel to add the event to.\n\t * @param {number|string} pitch - The pitch of the note, either numeric or\n\t * symbolic.\n\t * @param {number} [time=0] - The number of ticks since the previous event,\n\t * defaults to 0.\n\t * @param {number} [velocity=90] - The velocity the note was released,\n\t * defaults to DEFAULT_VOLUME.\n\t * @returns {Track} The current track.\n\t */\n\tTrack.prototype.addNoteOff = Track.prototype.noteOff = function(channel, pitch, time, velocity) {\n\t\tthis.events.push(new MidiEvent({\n\t\t\ttype: MidiEvent.NOTE_OFF,\n\t\t\tchannel: channel,\n\t\t\tparam1: Util.ensureMidiPitch(pitch),\n\t\t\tparam2: velocity || DEFAULT_VOLUME,\n\t\t\ttime: time || 0,\n\t\t}));\n\t\treturn this;\n\t};\n\n\t/**\n\t * Add a note-on and -off event to the track.\n\t *\n\t * @param {number} channel - The channel to add the event to.\n\t * @param {number|string} pitch - The pitch of the note, either numeric or\n\t * symbolic.\n\t * @param {number} dur - The duration of the note, in ticks.\n\t * @param {number} [time=0] - The number of ticks since the previous event,\n\t * defaults to 0.\n\t * @param {number} [velocity=90] - The velocity the note was released,\n\t * defaults to DEFAULT_VOLUME.\n\t * @returns {Track} The current track.\n\t */\n\tTrack.prototype.addNote = Track.prototype.note = function(channel, pitch, dur, time, velocity) {\n\t\tthis.noteOn(channel, pitch, time, velocity);\n\t\tif (dur) {\n\t\t\tthis.noteOff(channel, pitch, dur, velocity);\n\t\t}\n\t\treturn this;\n\t};\n\n\t/**\n\t * Add a note-on and -off event to the track for each pitch in an array of pitches.\n\t *\n\t * @param {number} channel - The channel to add the event to.\n\t * @param {array} chord - An array of pitches, either numeric or\n\t * symbolic.\n\t * @param {number} dur - The duration of the chord, in ticks.\n\t * @param {number} [velocity=90] - The velocity of the chord,\n\t * defaults to DEFAULT_VOLUME.\n\t * @returns {Track} The current track.\n\t */\n\tTrack.prototype.addChord = Track.prototype.chord = function(channel, chord, dur, velocity) {\n\t\tif (!Array.isArray(chord) && !chord.length) {\n\t\t\tthrow new Error('Chord must be an array of pitches');\n\t\t}\n\t\tchord.forEach(function(note) {\n\t\t\tthis.noteOn(channel, note, 0, velocity);\n\t\t}, this);\n\t\tchord.forEach(function(note, index) {\n\t\t\tif (index === 0) {\n\t\t\t\tthis.noteOff(channel, note, dur);\n\t\t\t} else {\n\t\t\t\tthis.noteOff(channel, note);\n\t\t\t}\n\t\t}, this);\n\t\treturn this;\n\t};\n\n\t/**\n\t * Set instrument for the track.\n\t *\n\t * @param {number} channel - The channel to set the instrument on.\n\t * @param {number} instrument - The instrument to set it to.\n\t * @param {number} [time=0] - The number of ticks since the previous event,\n\t * defaults to 0.\n\t * @returns {Track} The current track.\n\t */\n\tTrack.prototype.setInstrument = Track.prototype.instrument = function(channel, instrument, time) {\n\t\tthis.events.push(new MidiEvent({\n\t\t\ttype: MidiEvent.PROGRAM_CHANGE,\n\t\t\tchannel: channel,\n\t\t\tparam1: instrument,\n\t\t\ttime: time || 0,\n\t\t}));\n\t\treturn this;\n\t};\n\n\t/**\n\t * Set the tempo for the track.\n\t *\n\t * @param {number} bpm - The new number of beats per minute.\n\t * @param {number} [time=0] - The number of ticks since the previous event,\n\t * defaults to 0.\n\t * @returns {Track} The current track.\n\t */\n\tTrack.prototype.setTempo = Track.prototype.tempo = function(bpm, time) {\n\t\tthis.events.push(new MetaEvent({\n\t\t\ttype: MetaEvent.TEMPO,\n\t\t\tdata: Util.mpqnFromBpm(bpm),\n\t\t\ttime: time || 0,\n\t\t}));\n\t\treturn this;\n\t};\n\n\t/**\n\t * Serialize the track to an array of bytes.\n\t *\n\t * @returns {Array} The array of serialized bytes.\n\t */\n\tTrack.prototype.toBytes = function() {\n\t\tvar trackLength = 0;\n\t\tvar eventBytes = [];\n\t\tvar startBytes = Track.START_BYTES;\n\t\tvar endBytes   = Track.END_BYTES;\n\n\t\tvar addEventBytes = function(event) {\n\t\t\tvar bytes = event.toBytes();\n\t\t\ttrackLength += bytes.length;\n\t\t\teventBytes.push.apply(eventBytes, bytes);\n\t\t};\n\n\t\tthis.events.forEach(addEventBytes);\n\n\t\t// Add the end-of-track bytes to the sum of bytes for the track, since\n\t\t// they are counted (unlike the start-of-track ones).\n\t\ttrackLength += endBytes.length;\n\n\t\t// Makes sure that track length will fill up 4 bytes with 0s in case\n\t\t// the length is less than that (the usual case).\n\t\tvar lengthBytes = Util.str2Bytes(trackLength.toString(16), 4);\n\n\t\treturn startBytes.concat(lengthBytes, eventBytes, endBytes);\n\t};\n\n\t/* ******************************************************************\n\t * File class\n\t ****************************************************************** */\n\n\t/**\n\t * Construct a file object.\n\t *\n\t * Parameters include:\n\t *  - ticks [optional number] - Number of ticks per beat, defaults to 128.\n\t *    Must be 1-32767.\n\t *  - tracks [optional array] - Track data.\n\t */\n\tvar File = function(config){\n\t\tif (!this) return new File(config);\n\n\t\tvar c = config || {};\n\t\tif (c.ticks) {\n\t\t\tif (typeof c.ticks !== 'number') {\n\t\t\t\tthrow new Error('Ticks per beat must be a number!');\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tif (c.ticks <= 0 || c.ticks >= (1 << 15) || c.ticks % 1 !== 0) {\n\t\t\t\tthrow new Error('Ticks per beat must be an integer between 1 and 32767!');\n\t\t\t\treturn;\n\t\t\t}\n\t\t}\n\n\t\tthis.ticks = c.ticks || 128;\n\t\tthis.tracks = c.tracks || [];\n\t};\n\n\tFile.HDR_CHUNKID     = \"MThd\";             // File magic cookie\n\tFile.HDR_CHUNK_SIZE  = \"\\x00\\x00\\x00\\x06\"; // Header length for SMF\n\tFile.HDR_TYPE0       = \"\\x00\\x00\";         // Midi Type 0 id\n\tFile.HDR_TYPE1       = \"\\x00\\x01\";         // Midi Type 1 id\n\n\t/**\n\t * Add a track to the file.\n\t *\n\t * @param {Track} track - The track to add.\n\t */\n\tFile.prototype.addTrack = function(track) {\n\t\tif (track) {\n\t\t\tthis.tracks.push(track);\n\t\t\treturn this;\n\t\t} else {\n\t\t\ttrack = new Track();\n\t\t\tthis.tracks.push(track);\n\t\t\treturn track;\n\t\t}\n\t};\n\n\t/**\n\t * Serialize the MIDI file to an array of bytes.\n\t *\n\t * @returns {Array} The array of serialized bytes.\n\t */\n\tFile.prototype.toBytes = function() {\n\t\tvar trackCount = this.tracks.length.toString(16);\n\n\t\t// prepare the file header\n\t\tvar bytes = File.HDR_CHUNKID + File.HDR_CHUNK_SIZE;\n\n\t\t// set Midi type based on number of tracks\n\t\tif (parseInt(trackCount, 16) > 1) {\n\t\t\tbytes += File.HDR_TYPE1;\n\t\t} else {\n\t\t\tbytes += File.HDR_TYPE0;\n\t\t}\n\n\t\t// add the number of tracks (2 bytes)\n\t\tbytes += Util.codes2Str(Util.str2Bytes(trackCount, 2));\n\t\t// add the number of ticks per beat (currently hardcoded)\n\t\tbytes += String.fromCharCode((this.ticks/256),  this.ticks%256);;\n\n\t\t// iterate over the tracks, converting to bytes too\n\t\tthis.tracks.forEach(function(track) {\n\t\t\tbytes += Util.codes2Str(track.toBytes());\n\t\t});\n\n\t\treturn bytes;\n\t};\n\n\t/* ******************************************************************\n\t * Exports\n\t ****************************************************************** */\n\n\texported.Util = Util;\n\texported.File = File;\n\texported.Track = Track;\n\texported.Event = MidiEvent;\n\texported.MetaEvent = MetaEvent;\n\n})( Midi );\n\nif (typeof module != 'undefined' && module !== null) {\n\tmodule.exports = Midi;\n} else if (typeof exports != 'undefined' && exports !== null) {\n\texports = Midi;\n} else {\n\tthis.Midi = Midi;\n}\n","module.exports = function(module) {\n\tif (!module.webpackPolyfill) {\n\t\tmodule.deprecate = function() {};\n\t\tmodule.paths = [];\n\t\t// module.parent = undefined by default\n\t\tif (!module.children) module.children = [];\n\t\tObject.defineProperty(module, \"loaded\", {\n\t\t\tenumerable: true,\n\t\t\tget: function() {\n\t\t\t\treturn module.l;\n\t\t\t}\n\t\t});\n\t\tObject.defineProperty(module, \"id\", {\n\t\t\tenumerable: true,\n\t\t\tget: function() {\n\t\t\t\treturn module.i;\n\t\t\t}\n\t\t});\n\t\tmodule.webpackPolyfill = 1;\n\t}\n\treturn module;\n};\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar channel_1 = require(\"./channel\");\nvar Session = /** @class */ (function () {\n    function Session(arr) {\n        arr = arr || [];\n        this.sessionChannels = arr.map(function (ch, i) {\n            ch.idx = ch.idx || i;\n            return new channel_1.Channel(ch);\n        });\n    }\n    Session.prototype.createChannel = function (ch) {\n        ch.idx = ch.idx || this.sessionChannels.length;\n        this.sessionChannels.push(new channel_1.Channel(ch));\n    };\n    Object.defineProperty(Session.prototype, \"channels\", {\n        get: function () {\n            return this.sessionChannels;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    // Start the clips at a specific index in all the channels\n    Session.prototype.startRow = function (idx) {\n        this.sessionChannels.forEach(function (ch) {\n            ch.startClip(idx);\n        });\n    };\n    return Session;\n}());\nexports.Session = Session;\n","\"use strict\";\nvar __assign = (this && this.__assign) || function () {\n    __assign = Object.assign || function(t) {\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\n            s = arguments[i];\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))\n                t[p] = s[p];\n        }\n        return t;\n    };\n    return __assign.apply(this, arguments);\n};\nvar __rest = (this && this.__rest) || function (s, e) {\n    var t = {};\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\n        t[p] = s[p];\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) if (e.indexOf(p[i]) < 0)\n            t[p[i]] = s[p[i]];\n    return t;\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar clip_1 = require(\"./clip\");\n/**\n * Get the next logical position to play in the session\n * Tone has a build-in method `Tone.Transport.nextSubdivision('4n')`\n * but I think it s better to round off as follows for live performance\n */\nvar getNextPos = function () {\n    var arr = Tone.Transport.position.split(':');\n    // If we are still around 0:0:0x, then set start position to 0\n    if (arr[0] === '0' && arr[1] === '0') {\n        return 0;\n    }\n    // Else set it to the next bar\n    return +arr[0] + 1 + ':0:0';\n};\n/**\n * Channel\n * A channel is made up of a Tone.js Player/Instrument, one or more\n * Tone.js sequences (known as clips in Scribbletune)\n * & optionally a set of effects (with or without presets)\n *\n * API:\n * clips -> Get all clips for this channel\n * addClip ->\n */\nvar Channel = /** @class */ (function () {\n    function Channel(params) {\n        var _this = this;\n        (this.idx = params.idx), (this.activePatternIdx = -1);\n        this.channelClips = [];\n        if (params.sample) {\n            this.player = new Tone.Player(params.sample);\n            this.player.toMaster();\n        }\n        if (params.synth) {\n            this.instrument = new Tone[params.synth]();\n            this.instrument.toMaster();\n        }\n        if (params.samples) {\n            this.sampler = new Tone.Sampler(params.samples);\n            this.sampler.toMaster();\n        }\n        // Filter out unrequired params and create clip params object\n        var clips = params.clips, samples = params.samples, sample = params.sample, synth = params.synth, originalParamsFiltered = __rest(params, [\"clips\", \"samples\", \"sample\", \"synth\"]);\n        params.clips.forEach(function (c) {\n            _this.addClip(__assign({}, c, originalParamsFiltered));\n        }, this);\n    }\n    Object.defineProperty(Channel.prototype, \"clips\", {\n        get: function () {\n            return this.channelClips;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Channel.prototype.startClip = function (idx) {\n        // Stop any other currently running clip\n        if (this.activePatternIdx > -1 && this.activePatternIdx !== idx) {\n            this.stopClip(this.activePatternIdx);\n        }\n        if (this.channelClips[idx] && this.channelClips[idx].state !== 'started') {\n            this.activePatternIdx = idx;\n            this.channelClips[idx].start(getNextPos());\n        }\n    };\n    Channel.prototype.stopClip = function (idx) {\n        this.channelClips[idx].stop(getNextPos());\n    };\n    Channel.prototype.addClip = function (clipParams, idx) {\n        idx = idx || this.channelClips.length;\n        if (clipParams.pattern) {\n            this.channelClips[idx] = clip_1.clip(Object.assign({\n                player: this.player,\n                instrument: this.instrument,\n                sampler: this.sampler,\n            }, clipParams));\n        }\n        else {\n            // Allow creation of empty clips\n            this.channelClips[idx] = null;\n        }\n    };\n    Object.defineProperty(Channel.prototype, \"activeClipIdx\", {\n        get: function () {\n            return this.activePatternIdx;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    return Channel;\n}());\nexports.Channel = Channel;\n"],"sourceRoot":""}